<?php

/*
 * PanKM Generic module for writing the codes related to core and common
 * functions used throughout the PanKM site.
 *
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\TrustedRedirectResponse;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\node\Entity;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\user\Entity\User;
use Drupal\webform\Utility\WebformFormHelper;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Request;
use Drupal\file\Entity\File;
use Drupal\Core\Archiver\ArchiveTar;
use Drupal\webform\Entity\Webform;
use Drupal\webform\Entity\WebformSubmission;

function n($arr, $message = false)
{
    $ip_array = array('10.20.2.155');
    if (in_array($_SERVER['REMOTE_ADDR'], $ip_array)) {
        if (empty($message)) {
            print '<pre>';
            print_r($arr);
            print '</pre>';
        } else {
            drupal_set_message('<pre>' . var_export($arr, true) . '</pre>');
        }
    }
}

function pankm_custom_page_attachments(array &$page)
{

    $current_path       = \Drupal::service('path.current')->getPath();
    $current_path_array = explode('/', $current_path);
    if ($current_path_array[2] == 'border') {
        return new RedirectResponse(\Drupal\Core\Url::fromRoute('user.page'));

        //header("Location: https://www.rapidtables.com/web/dev/php-redirect.html", true, 301);
        //exit();

    }
    global $conf_nepad;
    $current_path       = \Drupal::service('path.current')->getPath();
    $current_path_array = explode('/', $current_path);
    if (($current_path_array[1] == 'node' && !empty($current_path_array[3])) || ($current_path_array[1] == 'group' && !empty($current_path_array[3]))) {
        $page['#attached']['library'][] = 'pankm_custom/pankm-custom-styling';
    }
}

/**
 * Implements hook_form_alter().
 */

function pankm_custom_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id)
{

  if ($form['#id'] == 'views-exposed-form-agenda-2063-country-listing-page-1') {
     $form['#prefix'] = '<div class="view-filters">';
     $form['#suffix'] = '</div>';    
   }
 }

/**
 * Implements hook_form_alter().
 */

function pankm_custom_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
    if ($form_id == "webform_submission_event_registration_form_block_content_60_form") {

    }

    $current_path       = \Drupal::service('path.current')->getPath();
    $current_path_array = explode('/', $current_path);

/**
 * Set Mutiple mail for notification.
 *
 * Changed to textfield from email.
 * Over ride the core file /core/modules/user/src/AccountSettingsForm.php
 */
    if (($current_path_array[1] == 'admin') && ($current_path_array[4] == 'accounts')) {

        if ($form_id == "user_admin_settings") {
            $site_config = \Drupal::config('system.site');

            $form['mail_notification_address'] = [
                '#type'          => 'textfield',
                '#title'         => t('Notification email address'),
                '#default_value' => $site_config->get('mail_notification'),
                '#description'   => t("The email address to be used as the 'from' address for all account notifications listed below. If <em>'Visitors, but administrator approval is required'</em> is selected above, a notification email will also be sent to this address for any new registrations. Leave empty to use the default system email address <em>(%site-email).</em> <br>Multiple email addresses may be separated by commas. (sample@mail.com, sample2@mail.com, sample3@mail.com)", ['%site-email' => $site_config->get('mail')]),
                '#maxlength'     => 180,
            ];
        }
    }

    /*Comment Reply fetch*/

    if ($current_path_array[1] == 'comment' && $current_path_array[2] == 'reply') {
        if ($form_id == 'comment_comment_form') {

            $user = \Drupal::currentUser();
            $mail = $user->getEmail();
            $name = $user->getUsername();

            $form['field_your_name']['widget'][0]['value']['#default_value'] = $name;
            $form['field_email']['widget'][0]['value']['#default_value']     = $mail;
        }
    }

    /*Thematic Priorities / Centres of Excellence*/

  if(($form_id == 'node_areas_of_work_form') || ($form_id == 'node_areas_of_work_edit_form')){
    if($form_id == 'node_areas_of_work_edit_form'){
      $title = $form['title']['widget'][0]['value']['#default_value'];
      $type = $form['field_type']['widget']['#default_value'][0];
      if($type == 'areas-of-work'){
        $type_name = 'Thematic Priorities';
      }      
      elseif($type == 'centres-of-excellence'){
        $type_name = 'Centres of Excellence';
      }
      $form['#title'] = 'Edit ' . $type_name . ' ' . $title;
    }
    if($form_id == 'node_areas_of_work_form'){
      $type_name = 'Thematic Priorities/ Centres of Excellence';
      $type = \Drupal::request()->query->get('edit')['field_type'];
      if($type == 'areas-of-work'){
        $type_name = 'Thematic Priorities';
      }      
      elseif($type == 'centres-of-excellence'){
        $type_name = 'Centres of Excellence';
      }
      $form['#title'] = 'Create ' . $type_name;
    }
  }

  // if(($form_id == 'node_micro_site_form') || ($form_id == 'node_micro_site_edit_form')){
  //   $form['field_micro_site_page']['#attributes']['class'][] = 'hidden';
  // }
  

/*code for manage the webform in /webform-experts-cop
 *
 * Manging the approve section in Expert Pool
 */

    if ($current_path_array[1] == 'webform-experts-cop') {
        $groupid = $current_path_array[2];

        //if (($_SESSION[$form['#id']] == 'webform-submission-expert-pool-group-'.$groupid.'-form')) {

        if (($form['#id'] == 'webform-submission-expert-pool-group-' . $groupid . '-form')) {

            $user                  = \Drupal::currentUser();
            $current_uid           = $user->id();
            $_SESSION[$adminCheck] = 0;

            $_SESSION[$group_role] = db_query('SELECT group_roles_target_id FROM group_content_field_data AS g1 INNER JOIN group_content__group_roles AS g2 ON g1.id = g2.entity_id WHERE g1.entity_id= :id AND g1.gid= :gid', array(':id' => $current_uid, ':gid' => $groupid))->fetchAll();

            foreach ($_SESSION[$group_role] as $group_role_id) {
                if ($group_role_id->group_roles_target_id == 'community_of_practice-admin') {
                    $_SESSION[$adminCheck] = 1;
                }
            }

            // print_r($group_role);exit;

            $elements = &WebformFormHelper::flattenElements($form['elements']);
            if ($_SESSION[$adminCheck] != 1) {
                $elements['approve']['#access'] = false;
            }

        }

    }

/*code for manage search in /nepadspanishfund/projects*/
    if ($form_id == 'views_exposed_form') {

        // if($form['#id'] == ('views-exposed-form-latest-projects-nepadspanishfund-page-1' || 'views-exposed-form-latest-good-practices-gender-page-1') ) {
        if (($form['#id'] == 'views-exposed-form-latest-projects-nepadspanishfund-page-1') || ($form['#id'] == 'views-exposed-form-latest-good-practices-gender-page-1')) {

            $form['#prefix'] = '<div class="view-filters">';
            $form['#suffix'] = '</div>';

            $query = db_select('node_field_data', 'n')
                ->fields('n', array('nid', 'title', 'created', 'langcode'))
                ->fields('country', array('field_country_title_target_id'))
                ->condition('n.type', 'gender_map_countries', '=')
                ->condition('n.langcode', 'en', '=')
                ->condition('n.status', '1', '=');
            $query->leftJoin('node__field_country_title', 'country', 'country.entity_id = n.nid and country.langcode = n.langcode');
            $query->orderBy('n.title', 'ASC');
            $query_data = $query->execute();

            $country_list     = array();
            $country_list[''] = '-Any-';
            foreach ($query_data as $country) {

                $country_list[$country->nid] = $country->title;
            }

            $form['field_gender_map_country_referen_target_id'] = array(
                '#type'       => 'select',
                '#options'    => $country_list,
                '#validate'   => true,
                '#attributes' => array('placeholder' => array(t('country'))),
            );

        }
    }

    /**
     * The following code commented due to the the already in the view with the new updation
     *code events in /manage-event-registration   dashboard
     *
     * */

    //~ if($form_id == 'views_exposed_form') {

    //~ if(($form['#id'] == 'views-exposed-form-event-registration-page-1')) {

    //~ $form['#prefix'] = '<div class="view-filters">';
    //~ $form['#suffix'] = '</div>';

    //~ $query =  db_select('node_field_data', 'n')
    //~ ->fields('n', array('nid', 'title','created', 'langcode'))
    //~ ->condition('n.type', 'pankm_events', '=')
    //~ ->condition('n.langcode', 'en', '=')
    //~ ->condition('n.status', '1', '=');

    //~ $query->orderBy('n.title', 'ASC');
    //~ $query_data = $query->execute();

    //~ $event_list = array();
    //~ $event_list[''] = '-Any-';
    //~ foreach($query_data as $event) {

    //~ $event_list[$event->nid] = $event->title;
    //~ }

    //~ $form['webform_submission_value'] = array(
    //~ '#type' => 'select',
    //~ '#options' => $event_list,
    //~ '#validate'=> TRUE,
    //~ '#attributes' => array('placeholder' => array(t('Events'))),
    //~ );

    //~ }
    //~ }

    //print_r($form_id);

    //$previousUrl = $_SERVER['HTTP_REFERER'];
    //$prev = explode('/',$previousUrl);  //d($prev);
    $id = \Drupal::request()->query->get('id');
    if (isset($id)) {

        if ($form_id == ('node_pan_km_news_form ' || 'node_pankm_events_form' || 'node_documents_form' || 'node_project__form' || 'node_programme_map_data_form')) {
            foreach (array_keys($form['actions']) as $action) {
                if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
                    $form['actions'][$action]['#submit'][] = 'pankm_custom_form_submit';

                }
            }
        }

    }
    $current_path = \Drupal::service('path.current')->getPath();

    $current_path = explode('/', $current_path);

    if (($form_id == 'node_pan_km_news_form' || $form_id == 'node_pankm_events_form' || $form_id == 'node_documents_form' || $form_id == 'node_pkm_forum_form' || $form_id == 'node_blog_entry_form') && $current_path[1] == 'group' && is_numeric($current_path[2]) && $current_path[3] == 'content') {
        foreach (array_keys($form['actions']) as $action) {
            if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
                $form['actions'][$action]['#submit'][] = 'pankm_custom_group_form_submit';

            }
        }
    } 
    if ($form_id == 'simplenews_subscriptions_block_0f325ad5-8b69-4afe-9f68-53f7108a2f75') {
        $form['mail']['widget'][0]['value']['#placeholder'] = 'Enter email to subscribe...';
    }

    if ($form_id == 'simplenews_subscriptions_block_39624d28-b94c-4b1f-aa00-3410f5454488') {
        $form['mail']['widget'][0]['value']['#placeholder'] = 'E-mail';
    }


/*code disable field in group add content page , also used a module disable field*/

    $current_path = \Drupal::service('path.current')->getPath();
    $cur_path     = explode('/', $current_path);

    if ($cur_path[1] == 'group' && $cur_path[3] == 'content' && !empty($cur_path[4])) {

        $current_user = \Drupal::currentUser();
        $roles        = $current_user->getRoles();

        if (in_array('administrator', $roles) || in_array('admin_user', $roles) || in_array('content_editor', $roles) || in_array('ceo', $roles) || in_array('skills_subsite_admin', $roles) || in_array('gender_subsite_admin', $roles) || in_array('agenda_subsite_admin', $roles) || in_array('caadp_subsite_admin', $roles) || in_array('c', $roles) || in_array('nutrition_subsite_admin', $roles) || in_array('traffic_subsite_admin', $roles)) {
            $form['field_subsite']['#disabled'] = false;
        }
    }

}

function pankm_custom_group_form_submit(array $form, FormStateInterface $form_state)
{

    //$previousUrl = $_SERVER['HTTP_REFERER'];
    //$prev = explode('/',$previousUrl);

    $current_path = \Drupal::service('path.current')->getPath();
    $current_path = explode('/', $current_path);

    $groupid = '/' . $current_path[1] . '/' . $current_path[2];

    if ((isset($groupid)) && $current_path[3] == 'content') {
        global $base_url;
        $dest_url_group = $groupid;

        $groupurl = $base_url . \Drupal::service('path.alias_manager')->getAliasByPath($dest_url_group);

        $response1 = new TrustedRedirectResponse($groupurl);

        $form_state->setResponse($response1);
    }

}
function pankm_custom_form_submit(array $form, FormStateInterface $form_state)
{

    $id  = \Drupal::request()->query->get('id');
    $nid = \Drupal::service('path.alias_manager')->getPathByAlias('/node/' . $id);
    global $base_url;
    $dest_url = $nid;
    $url      = $base_url . \Drupal::service('path.alias_manager')->getAliasByPath($dest_url);
    if ($id) {
        $response = new TrustedRedirectResponse($url);

        $form_state->setResponse($response);
    }

}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function pankm_custom_form_user_login_form_alter(&$form, FormStateInterface $form_state)
{
    $form['#submit'][] = 'pankm_custom_user_login_submit';
}

/**
 * Form submission handler for user_login_form().
 *
 * Redirects the user to the dashboard after logging in.
 *
 * role c means climate_subsite_admin
 */
function pankm_custom_user_login_submit(&$form, FormStateInterface $form_state){

    $current_user = \Drupal::currentUser();
    $roles        = $current_user->getRoles();
    if (in_array('administrator', $roles) || in_array('admin_user', $roles) || in_array('content_editor', $roles) || in_array('ceo', $roles) || in_array('skills_subsite_admin', $roles) || in_array('gender_subsite_admin', $roles) || in_array('caadp_subsite_admin', $roles) || in_array('c', $roles) || in_array('nutrition_subsite_admin', $roles) || in_array('traffic_subsite_admin', $roles) || in_array('cyber_subsite_admin', $roles)) {
        $url = Url::fromRoute('dashboardnew.content');
    } 
    elseif(in_array('agenda_subsite_admin', $roles)){

        $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
        $agenda_role = $user->field_agenda_dashboard_roles->value;
        $country_id = $user->get('field_agenda_countries')->getValue();
        foreach ($country_id as $key => $value) {
            $country_array[] = $value['target_id'];
        }
        if(($agenda_role == 'country_member') || ($agenda_role == 'country_head')){
            $query = \Drupal::entityQuery('node');
            $query->condition('status', 1);
            $query->condition('type', 'agenda_dashboard_data');            
            $query->condition('field_agenda_country', $country_array, 'IN');
            $query->range(0, 1);
            $query->sort('field_agenda_country', 'ASC');
            $node_id_array = $query->execute();
            foreach ($node_id_array as $key => $node_id) {}
            $url = Url::fromRoute('agenda_template.custom_manage_form',['node' =>  $node_id]);
        }
        else if(($agenda_role == 'region_head') || ($agenda_role == 'agenda_admin')){
            $url = Url::fromRoute('view.manage_agenda_2063_country_data.page_1');
        }
        else{
            $url = Url::fromRoute('dashboardnew.content');
        }
    }
    else {
        $url = Url::fromRoute('<front>');
    }

    // Check if a destination was set, probably on an exception controller.
    // @see \Drupal\user\Form\UserLoginForm::submitForm()
    $request = \Drupal::service('request_stack')->getCurrentRequest();
    if (!$request->request->has('destination')) {
        $form_state->setRedirectUrl($url);
    } else {
        $request->query->set('destination', $request->request->get('destination'));
    }
}
/**
 * Implements hook_form_alter().
 *
 */
/*
function pankm_custom_form_alter(&$form, FormStateInterface $form_state, $form_id) {
$previousUrl = $_SERVER['HTTP_REFERER'];
$prev = explode('/',$previousUrl);

if ($form_id == ('node_pan_km_news_form ' || 'node_pankm_events_form' || 'node_documents_form' || 'node_project__form' || 'node_programme_map_data_form')  && $prev[4] == 'programme') {
$nid = \Drupal::service('path.alias_manager')->getPathByAlias('/'.$prev[4].'/'.$prev[5]);
global $base_url;
$dest_url = $nid;
$url = $base_url.\Drupal::service('path.alias_manager')->getAliasByPath($dest_url);
// $form['#action'] = $url;
}
if ($form_id == ('node_pan_km_news_form ' || 'node_pankm_events_form' || 'node_documents_form' || 'node_pkm_forum_form')  && $prev[4] == 'cop') {

$gid = \Drupal::service('path.alias_manager')->getPathByAlias('/'.$prev[4].'/'.$prev[5]);
global $base_url;
$dest_url_group = $gid;
$groupurl = $base_url.\Drupal::service('path.alias_manager')->getAliasByPath($dest_url_group);
//$form['#action'] = $groupurl;

}
}
 */

/**
 * Implements hook_entity_presave().
 */
function pankm_custom_entity_presave(EntityInterface $entity)
{
    $date_formatter = \Drupal::service('date.formatter');
    $entitytype     = $entity->bundle();
    //print_r($entity->type);exit;

    if ($entitytype = ('group_content_type_c5547ee801596' || 'group_content_type_ddfc109a998c8' || 'group_content_type_23eb3f98f0390' || 'group_content_type_eedb5a7e895c4')) {
        $group = \Drupal::routeMatch()->getParameter('group');
        if ($group) {
            $groupbundle = $group->bundle();
            $groupid     = $group->id();

            if (isset($entity->field_community_of_practice)) {
                unset($entity->field_community_of_practice);
                $entity->field_community_of_practice = $groupid;
            }

        }
        /* save the date field into date sort for common sorting field -> Group*/

        if (isset($entity->field_date_sort) && isset($entity->field_cop_expert_webform)) {
            $entity->field_date_sort = $date_formatter->format($entity->getCreatedTime(), 'custom', 'Y-m-d');
        }
    }

    if ($entitytype == 'document') {

    }
}

function pankm_custom_node_presave(EntityInterface $node)
{
    $language       = \Drupal::languageManager()->getCurrentLanguage()->getId();
    $date_formatter = \Drupal::service('date.formatter');

    if (($node->getType() == 'documents') && ($language == 'fr')) {
        $node->field_subsite = 68;
    }

    /* save the date field*/

    if ($node->field_date_sort) {

        switch ($node->getType()) {
            case 'pan_km_news':
                $node->field_date_sort = $node->field_pan_km_news_date;
                break;
            case 'project_':
                $node->field_date_sort = $date_formatter->format($node->getCreatedTime(), 'custom', 'Y-m-d');
                break;
            case 'documents':
                $node->field_date_sort = $node->field_document_publication_date;
                break;
            case 'pankm_events':
                $node->field_date_sort = $node->field_start_date;
                break;
            case 'blog_entry':
                $node->field_date_sort = $node->field_date;
                break;
            case 'pan_km_digital_asset_library':
                $node->field_date_sort = $date_formatter->format($node->getCreatedTime(), 'custom', 'Y-m-d');
                break;
            case 'ceo_blog':
                $node->field_date_sort = $node->field_ceo_blog_date;
                break;
        }
    }
}

/*
 *
 * Addning language class to body
 */
function zion_preprocess_html(&$variables)
{
    $variables['language'] = \Drupal::languageManager()->getCurrentLanguage()->getId();

    /*Current Path*/
    $current_path       = \Drupal::service('path.current')->getPath();
    $current_path_alias = \Drupal::service('path.alias_manager')->getAliasByPath($current_path);

    if ($current_path_alias) {
        $current_path_alias_array = explode("/", $current_path_alias);
    }
    if($current_path_alias == '/agenda-2063/about'){
         $variables['agenda_active_class'] = 'current-agenda-2063';
    } 

    if (($current_path_alias_array[1] == 'agenda-2063') && isset($current_path_alias_array[2])) {
         $variables['agenda_active_class'] = 'current-agenda-2063';
    }

    if (($current_path_alias_array[1] == 'node') && empty($current_path_alias_array[2])) {
         $variables['agenda_active_class'] = 'path-frontpage';
    }

    if($current_path_alias == '/covid-19'){
         $variables['menu_active_class'] = 'path-news-centre';
    } 

    if (isset($current_path_alias_array) && $current_path_alias_array[1]) {
        if ($current_path_alias_array[1] == 'skillsportalforyouth') {
            $current_path_alias_array[1] = 'skills';
        }

        if ($current_path_alias_array[1] == 'gender') {
            $current_path_alias_array[1] = 'nepadspanishfund';
        }

        /*Adding the class to the COP*/
        if (($current_path_alias_array[1] == 'cop' && isset($current_path_alias_array[2])) || ($current_path_alias_array[2] == 'cop' && isset($current_path_alias_array[3]))) {
            $variables['menu_active_class'] = 'page-cop-details';

            $user_role     = \Drupal::currentUser()->getRoles();
            $member_or_not = null;
            $path_params   = explode('/', $current_path);
            $current_uid   = \Drupal::currentUser()->id();
            $groupid       = $path_params[2];

            $member_or_not = db_query('SELECT r.group_roles_target_id FROM group_content_field_data AS g INNER JOIN group_content__group_roles AS r WHERE g.id = r.entity_id AND g.gid= :gid AND g.entity_id = :uid', array(':uid' => $current_uid, ':gid' => $groupid))->fetchAll();

            if (($member_or_not != null) || (in_array("administrator", $user_role)) || (in_array("content_editor", $user_role))) {

                $variables['cop_member_class'] = 'cop-member';
            }
        }

        $variables['subsite'] = $current_path_alias_array[1];

    }

    /*procurement page class*/
    if ($current_path_alias_array[1] == 'work-with-us' && $current_path_alias_array[2] == 'procurement') {
        $variables['menu_active_class'] = 'skills-events';
    }

    /*Adding current url to body class*/
    unset($current_path_alias_array[0]);
    if (count($current_path_alias_array) > 0) {
        if ($current_path_alias_array[1] == 'skillsportalforyouth') {
            $current_path_alias_array[1] = 'skills';
        }
        if ($current_path_alias_array[1] == 'gender') {
            $current_path_alias_array[1] = 'nepadspanishfund';
        }
        $variables['pankm_current_site'] = implode("-", $current_path_alias_array);
    }

    /*Adding 'add-edit' class for non super admin user*/
    $uid = \Drupal::currentUser()->id();
    if ($uid !== 1) {
        //print_r($current_path_alias_array);

        if ($current_path_alias_array[1] == 'node' && $current_path_alias_array[3] == 'edit') {
            $variables['pankm_add_edit'] = 'add-edit';
        } elseif ($current_path_alias_array[1] == 'group' && $current_path_alias_array[3] == 'edit') {
            $variables['pankm_add_edit'] = 'add-edit group-footer-create';
        } elseif ($current_path_alias_array[1] == 'group' && $current_path_alias_array[2] == 'add') {
            $variables['pankm_add_edit'] = 'add-edit group-footer-create';
        } elseif ($current_path_alias_array[1] == 'node' && $current_path_alias_array[2] == 'add' && !empty($current_path_alias_array[3])) {
            $variables['pankm_add_edit'] = 'add-edit';
        } elseif ($current_path_alias_array[1] == 'group' && $current_path_alias_array[4] == 'create' && !empty($current_path_alias_array[2])) {
            $variables['pankm_add_edit'] = 'add-edit group-footer-create';
        } elseif ($current_path_alias_array[1] == 'node' && $current_path_alias_array[3] == 'delete') {
            $variables['pankm_add_edit'] = 'node-delete';
        } elseif ($current_path_alias_array[1] == 'group' && $current_path_alias_array[3] == 'delete') {
            $variables['pankm_add_edit'] = 'node-delete  group-footer-create';
        } elseif ($current_path_alias_array[1] == 'comment' && $current_path_alias_array[3] == 'delete') {
            $variables['pankm_add_edit'] = 'node-delete';
        } elseif ($current_path_alias_array[1] == 'comment' && $current_path_alias_array[3] == 'edit') {
            $variables['pankm_add_edit'] = 'add-edit';
        } elseif ($current_path_alias_array[1] == 'comment' && $current_path_alias_array[3] == 'edit') {
            $variables['pankm_add_edit'] = 'add-edit';
        } elseif ($current_path_alias_array[1] == 'register-event') {
            $variables['pankm_add_edit'] = 'add-edit';
        } elseif ($current_path_alias_array[1] == 'user' && $current_path_alias_array[3] == 'edit') {
            $variables['pankm_add_edit'] = 'add-edit';
        } /*elseif($current_path_alias_array[1] == 'user' && $current_path_alias_array[2] == 'register') {
    $variables['pankm_add_edit'] = 'add-edit';
    }*/
    }

    if ($current_path_alias_array[1] == 'admin' && $current_path_alias_array[2] == 'structure' && $current_path_alias_array[3] == 'taxonomy' && $current_path_alias_array[4] == 'manage' && $current_path_alias_array[5] == 'rec_grouping' && $current_path_alias_array[6] == 'add') {
        $variables['pankm_add_edit'] = 'add-edit';
    }
    if ($current_path_alias_array[1] == 'taxonomy' && $current_path_alias_array[2] == 'term' && $current_path_alias_array[4] == 'edit') {
        $variables['pankm_add_edit'] = 'add-edit';
    }

    /*Events page hide title for conference type*/
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node instanceof \Drupal\node\NodeInterface) {
        $type = $node->bundle();
        if ($type == 'pankm_events') {
            if ($node->get('field_conference_type')->value == 1) {
                $variables['events_conference'] = 'conference';
            }
            /*Menu active class*/
            $variables['menu_active_class'] = 'menu-news-centre events';
        } else if ($type == 'pan_km_news') {
            $variables['menu_active_class'] = 'menu-news-centre news';
        } else if ($type == 'documents') {
            if ($node->field_document_type->getValue()[0]['target_id'] == '19') {
                $variables['menu_active_class'] = 'menu-news-centre speeches';
            } else if ($node->field_document_type->getValue()[0]['target_id'] == '12') {
                $variables['menu_active_class'] = 'menu-news-centre newsletters';
            }
        } else if ($type == 'pan_km_digital_asset_library') {
            if ($node->field_pan_km_dal_type->getValue()[0]['target_id'] == '50') {
                $variables['menu_active_class'] = 'menu-news-centre stories';
            }
            if ($node->field_pan_km_dal_type->getValue()[0]['target_id'] == '51') {
                $variables['menu_active_class'] = 'menu-news-centre videos';
            }
        } elseif ($current_path_alias_array[1] == 'media-contact') {
            $variables['menu_active_class'] = 'menu-news-centre media-contact';
        }
    }

    /*Skills*/
    $node    = \Drupal::routeMatch()->getParameter('node');
    $group   = \Drupal::routeMatch()->getParameter('group');
    $subsite = \Drupal::request()->query->get('subsite');
    if ($group) {
        if ($group->get('field_subsite')->target_id == 69) {
            $variables['menu_active_class'] = 'skills-cop page-cop-details';
        }
    }
    if ($current_path_alias_array[1] == 'skillsportalforyouth' && $current_path_alias_array[2] == 'topic') {
        $variables['menu_active_class'] = 'skills-topics';
    }
    if ($node instanceof \Drupal\node\NodeInterface) {
        $type = $node->bundle();
        //~ if($current_path_alias_array[1] == 'skills' && $current_path_alias_array[2] == 'project') {
        if ($type == 'project_') {
            if ($node->get('field_subsite')->target_id == 69) {
                $variables['menu_active_class'] = 'skills-good-practices';
            }
        } elseif ($current_path_alias_array[1] == 'skillsportalforyouth' && $current_path_alias_array[2] == 'country') {
            $variables['menu_active_class'] = 'skills-countries';
            //} elseif($current_path_alias_array[1] == 'skills' && $current_path_alias_array[2] == 'publication') {
        } elseif ($type == 'documents') {
            if ($node->get('field_subsite')->target_id == 69) {
                if ($node->field_document_type->getValue()[0]['target_id'] == '22') {
                    $variables['menu_active_class'] = 'skills-tools-and-services';

                } else {
                    $variables['menu_active_class'] = 'skills-resources';
                }
            }
        } elseif ($type == 'pankm_events') {
            if ($node->get('field_subsite')->target_id == 69) {
                $variables['menu_active_class'] = 'skills-events';
            }
            if ($node->get('field_subsite')->target_id == 605) {
                $variables['menu_active_class'] = 'skills-events';
            }
        } elseif ($type == 'pan_km_news') {
            if ($node->get('field_subsite')->target_id == 69) {
                $variables['menu_active_class'] = 'skills-news';
            }
        } elseif ($type == 'pan_km_digital_asset_library') {
            if ($node->get('field_subsite')->target_id == 69) {
                $variables['menu_active_class'] = 'skills-stories';
            }
        }

    }

    /*traffic light system*/
    $node    = \Drupal::routeMatch()->getParameter('node');
    $group   = \Drupal::routeMatch()->getParameter('group');
    $subsite = \Drupal::request()->query->get('subsite');

    if ($node instanceof \Drupal\node\NodeInterface) {
        $type = $node->bundle();

        if ($type == 'pankm_events') {
            if ($node->get('field_subsite')->target_id == 499) {
                $variables['menu_active_class'] = 'skills-events';
            }
        } elseif ($type == 'pan_km_news') {
            if ($node->get('field_subsite')->target_id == 499) {
                $variables['menu_active_class'] = 'skills-news';
            }
        }

    }

/*class add to user pages username will hide using the class username-hide  */
    global $conf_nepad;
    $current_path       = \Drupal::service('path.current')->getPath();
    $current_path_array = explode('/', $current_path);
    if ($current_path_array[1] == 'user' && !empty($current_path_array[2])) {
        $variables['menu_active_class'] = 'username-hide';
    }

    /*Agenda-2063 meadia contacts class*/

    if ($current_path_array[1] == 'agenda-2063' && $current_path_array[2] == 'media-contact') {
        $variables['menu_active_class'] = 'agenda-media-contacts';
    }

/*Add body class skills-events in all subsites*/
    $node    = \Drupal::routeMatch()->getParameter('node');
    $group   = \Drupal::routeMatch()->getParameter('group');
    $subsite = \Drupal::request()->query->get('subsite');

    if ($node instanceof \Drupal\node\NodeInterface) {
        $type = $node->bundle();

        if ($type == 'pankm_events') {

            if ($node->get('field_subsite')->target_id == 68) {
                /* main site */
                $variables['menu_active_class'] = 'skills-events';
            }
            if ($node->get('field_subsite')->target_id == 315) {
                /* Nutrition */
                $variables['menu_active_class'] = 'skills-events';
            }
            if ($node->get('field_subsite')->target_id == 316) {
                /* Climate */
                $variables['menu_active_class'] = 'skills-events';
            }
            if ($node->get('field_subsite')->target_id == 171) {
                /* Gender */
                $variables['menu_active_class'] = 'skills-events';
            }
            if ($node->get('field_subsite')->target_id == 314) {
                /* CAADP  */
                $variables['menu_active_class'] = 'skills-events';
            }
            if ($node->get('field_subsite')->target_id == 318) {
                /* Agenda-2063  */
                $variables['menu_active_class'] = 'skills-events';
            }
        }

    }

/*User roles with class*/

    $current_user = \Drupal::currentUser();
    $roles        = $current_user->getRoles();
    if (in_array('administrator', $roles) || in_array('admin_user', $roles)) {
        $variables['menu_active_class'] .= ' admin_role';
    } else {
        $variables['menu_active_class'] .= ' user_role';
    }

    /*gender*/
    $node    = \Drupal::routeMatch()->getParameter('node');
    $group   = \Drupal::routeMatch()->getParameter('group');
    $subsite = \Drupal::request()->query->get('subsite');
    if ($current_path_alias_array[1] == 'nepadspanishfund' && $current_path_alias_array[2] == 'topic') {
        $variables['menu_active_class'] = 'gender-topics';
    } elseif ($current_path_alias_array[1] == 'nepadspanishfund' && $current_path_alias_array[2] == 'countries') {
        $variables['menu_active_class'] = 'gender-countries';
    }
    if ($node instanceof \Drupal\node\NodeInterface) {
        $type = $node->bundle();
        //~ if($current_path_alias_array[1] == 'skills' && $current_path_alias_array[2] == 'project') {
        if ($type == 'project_') {
            if ($node->get('field_subsite')->target_id == 171) {

                if ($node->get('field_good_practice_or_project')->getValue()[0]['value'] == 'good_practice') {
                    $variables['menu_active_class'] = 'gender-good-practices';
                } elseif ($node->get('field_good_practice_or_project')->getValue()[0]['value'] == 'project') {
                    $variables['menu_active_class'] = 'gender-projects';
                }
            }
        } elseif ($type == 'pan_km_news') {
            if ($node->get('field_subsite')->target_id == 171) {
                $variables['menu_active_class'] = 'gender-news';
            }
        } elseif ($type == 'pan_km_digital_asset_library') {
            if ($node->get('field_subsite')->target_id == 171) {
                $variables['menu_active_class'] = 'gender-stories';
            }
        }
    }

}

function subsitereferenceProgramme()
{
    /**
    Run the URL -> /subsitereference.json?subsite=314
     */
    $language         = \Drupal::languageManager()->getCurrentLanguage()->getId();
    $current_language = isset($language) ? $language : 'en';

    /* Getting query parameter from url */
    $subsite = \Drupal::request()->query->get('subsite');

    /* programme */
    $query = db_query("SELECT node_field_data.nid AS nid, node_field_data.title AS title FROM {node_field_data} node_field_data
    LEFT JOIN {node__field_subsite} node__field_subsite ON node_field_data.nid = node__field_subsite.entity_id AND
    (node__field_subsite.deleted = '0' AND node__field_subsite.langcode = node_field_data.langcode) WHERE
    ((node__field_subsite.field_subsite_target_id = :subsite )) AND ((node_field_data.type IN ('programmes')) AND
    (node_field_data.status = '1') AND (node_field_data.langcode = '$current_language'))", array(':subsite' => $subsite));

    foreach ($query as $viewkey => $viewsres) {
        $array_val['programme'][$viewsres->nid] = $viewsres->title;
    }

    /* Project */
    $query_project = db_query("SELECT node_field_data.nid AS nid, node_field_data.title AS title FROM  {node_field_data} node_field_data
    LEFT JOIN {node__field_subsite} node__field_subsite ON node_field_data.nid = node__field_subsite.entity_id AND
    (node__field_subsite.deleted = '0' AND node__field_subsite.langcode = node_field_data.langcode) WHERE
    ((node__field_subsite.field_subsite_target_id = :subsite )) AND ((node_field_data.type IN ('project_')) AND
    (node_field_data.status = '1') AND (node_field_data.langcode = '$current_language'))", array(':subsite' => $subsite));

    foreach ($query_project as $key => $res) {
        $array_val['project'][$res->nid] = $res->title;
    }

    /* Event */
    $query_event = db_query("SELECT node_field_data.nid AS nid, node_field_data.title AS title FROM {node_field_data} node_field_data
	LEFT JOIN {node__field_subsite} node__field_subsite ON node_field_data.nid = node__field_subsite.entity_id AND
	(node__field_subsite.deleted = '0' AND node__field_subsite.langcode = node_field_data.langcode) WHERE
	((node__field_subsite.field_subsite_target_id = :subsite )) AND ((node_field_data.type IN ('pankm_events')) AND
	(node_field_data.status = '1') AND (node_field_data.langcode = '$current_language'))", array(':subsite' => $subsite));

    foreach ($query_event as $eventkey => $eventres) {
        $array_val['event'][$eventres->nid] = $eventres->title;
    }

    /* News */
    $query_news = db_query("SELECT node_field_data.nid AS nid, node_field_data.title AS title FROM {node_field_data} node_field_data
    LEFT JOIN {node__field_subsite} node__field_subsite ON node_field_data.nid = node__field_subsite.entity_id AND
    (node__field_subsite.deleted = '0' AND node__field_subsite.langcode = node_field_data.langcode) WHERE
    ((node__field_subsite.field_subsite_target_id = :subsite )) AND ((node_field_data.type IN ('pan_km_news')) AND
    (node_field_data.status = '1') AND (node_field_data.langcode = '$current_language'))", array(':subsite' => $subsite));

    foreach ($query_news as $newskey => $newsres) {
        $array_val['news'][$newsres->nid] = $newsres->title;
    }

    /*COP */
    $query_g = db_select('groups_field_data', 'g')
        ->fields('g', array('id', 'label', 'created', 'changed', 'langcode', 'type'))
        ->fields('thumbnail', array('field_thumbnail_target_id'))
        ->condition('g.type', 'community_of_practice', '=')
        ->condition('g.langcode', $current_language, '=')
        ->condition('subsite.field_subsite_target_id', $subsite, '=');
    //->condition('subsite.field_subsite_target_id',array('315','316'), '!=');

    $query_g->leftJoin('group__field_subsite', 'subsite', 'subsite.entity_id = g.id and subsite.langcode = g.langcode');
    $query_g->leftJoin('group__field_thumbnail', 'thumbnail', 'thumbnail.entity_id = g.id and thumbnail.langcode = g.langcode');
    $query_g->orderBy('g.changed', 'DESC');
    $query_cop = $query_g->execute();

    foreach ($query_cop as $copkey => $copres) {
        $array_val['cop'][$copres->id] = $copres->label;
    }

    /*Blog */
    $query = db_select('node_field_data', 'n')
        ->fields('n', array('nid', 'title', 'created', 'langcode'))
        ->condition('n.langcode', $current_language, '=')
        ->condition('subsite.field_subsite_target_id', $subsite, '=')
        ->condition('n.status', '1', '=')
        ->condition('n.type', 'blog_entry', '=');
    $query->leftJoin('node__field_subsite', 'subsite', 'subsite.entity_id = n.nid and subsite.langcode = n.langcode');
    $query->orderBy('n.changed', 'DESC');
    $query_blog = $query->execute();
    if ($query_blog) {
        foreach ($query_blog as $blogkey => $blogres) {
            $array_val['blog'][$blogres->nid] = $blogres->title;
        }
    }

    /* Resource */
    $query_res = db_query("SELECT node_field_data.nid AS nid, node_field_data.title AS title FROM {node_field_data} node_field_data
    LEFT JOIN {node__field_subsite} node__field_subsite ON node_field_data.nid = node__field_subsite.entity_id AND
    (node__field_subsite.deleted = '0' AND node__field_subsite.langcode = node_field_data.langcode) WHERE
    ((node__field_subsite.field_subsite_target_id = :subsite )) AND ((node_field_data.type IN ('documents')) AND
    (node_field_data.status = '1') AND (node_field_data.langcode = '$current_language'))", array(':subsite' => $subsite));

    foreach ($query_res as $resourcekey => $resourceres) {
        $array_val['resources'][$resourceres->nid] = $resourceres->title;
    }

    return $array_val;
}


/**
 * Function to check the user is a member in a group or not, Using in /admin/structure/views/view/gender_comments/edit/block_7
 */
function check_group_member() {
  $current_path        = \Drupal::service('path.current')->getPath();
  $current_alias       = \Drupal::service('path.alias_manager')->getAliasByPath($current_path);
  $current_alias_array = explode('/', $current_alias);
  $current_path_array  = explode('/', $current_path);
  $nid                 = $current_path_array[2];

  if ($current_alias_array[1] == 'discussion-forum') {
    $user = \Drupal::currentUser();
    $roles = $user->getRoles();
    if (in_array('administrator', $roles)) {
      $true = 1;
      return $true;
    }
    else {

      $node = Node::load($nid);
      $uid = $user->id();
      $gid = \Drupal::request()->query->get('groupid');

      if (($gid == NULL) && isset($node)) {
        $gid = $node->get('field_community_of_practice')->target_id;
      }
      $query = db_query("SELECT u.uid FROM `group_content_field_data` AS g INNER JOIN `users_field_data` AS u INNER JOIN `group_content__group_roles` AS r WHERE g.type = 'group_content_type_34bf738fa906b' AND r.group_roles_target_id IS NOT NULL AND g.entity_id = u.uid AND g.id = r.entity_id AND g.gid = :gid AND u.uid = :uid", [':uid' => $uid, ':gid' => $gid]);
      foreach ($query as $row) {
        $true = $row->uid;
      }
      return $true;
    }
  }
}

/**
 * Implements hook_node_access().
 * For discussion forum in COP
 **/

function pankm_custom_node_access(NodeInterface $node, $op, AccountInterface $account) {

  $current_path        = \Drupal::service('path.current')->getPath();
  $current_alias       = \Drupal::service('path.alias_manager')->getAliasByPath($current_path);
  $current_alias_array = explode('/', $current_alias);

  if ($current_alias_array[1] == 'discussion-forum') {

    $type = $node->bundle();
    if ($type == 'pkm_forum') {
      $cop_member = check_group_member();
      if ($cop_member == NULL) {
        return AccessResult::forbidden();
      }
    }
  }
}


/**
 * Function download all tenders.
 */
function tender_command_line($nid, $email, $url) {

  $files = [];
  $head .= '<!doctype html>';
  $head .= '<html>';
  $head .= '<head>';
  $head .= '<meta charset="utf-8">';
  $head .= '<title> Tender Data </title>';
  $head .= '</head>';
  $head .= '<body>';
  $head .= '<table border="1">';
  $head .= '<thead><tr bgcolor="#cccccc" valign="top">';
  $head .= '<th> Tender ID </th>';
  $head .= '<th> Created</th>';
  $head .= '<th> Tender Name </th>';
  $head .= '<th> Body </th>';
  $head .= '<th> Duration of contract </th>';
  $head .= '<th> Supervisor </th>';
  $head .= '<th> Deadline </th>';
  $head .= '</tr></thead>';
  $head .= '<tbody>';

  $content .= $head;
  $nids = explode(',', $nid);
  foreach ($nids as $nid) {
    if ($nid != NULL) {
      /*load node*/
      $node = Node::load($nid);
      $content .= '<tr valign="top">';
      $content .= '<td>' . $nid . '</td>';
      $content .= '<td>' . format_date($node->created->value, 'custom', 'Y-m-d H:i:s') . '</td>';
      $content .= '<td>' . $node->title->value . '</td>';
      $content .= '<td>' . strip_tags($node->body->value) . '</td>';
      $content .= '<td>' . $node->field_duration_of_contract->value . '</td>';
      $content .= '<td>' . $node->field_supervisor->value . '</td>';
      $content .= '<td>' . $node->field_deadline->value . '</td>';
      $content .= '</tr>';

      foreach ($node->get('field_document_tender')->getValue() as $file) {
        $tender_file = File::load($file['target_id']);
        $file_uri = \Drupal::service('file_system')->realpath($tender_file->getFileUri());
        if (file_exists($file_uri)) {
          $files[$nid][] = $file_uri;
          $file_url = explode('/', $file_uri);
          array_pop($file_url);
          $file_path[$nid][] = implode('/', $file_url);
          $tendername[$nid][] = $node->title->value;
        }
      }
    }
  }
  $content .= '</tbody>';
  $content .= '</table>';
  $content .= '</body>';
  $content .= '</html>';

  $xls_name = 'nepad_tender.xls';
  $xls_file = file_save_data($content, 'public://' . $xls_name);
  $xls_file_path = \Drupal::service('file_system')->realpath($xls_file->getFileUri());
  $public_path = \Drupal::service('file_system')->realpath('public://');

  $filename = "NEPAD-Tender";
  $tmp_file = file_save_data('', 'public://' . $filename);
  $tmp_file->status = 0;
  $tmp_file->save();
  $tmp_path = $tmp_file->getFileUri();
  $archive = new ArchiveTar($tmp_path, 'gz');

  foreach ($nids as $nid) {

    if ($file_path[$nid] != NULL) {
      if (count(array_unique($file_path[$nid])) === 1) {
        $replace_path = $file_path[$nid][0];
      }
      else {
        $replace_path = $public_path;
      }
      $archive->addModify($files[$nid], $tendername[$nid][0] . '-' . $nid, $replace_path);
    }
    $i++;
  }
  $archive->addModify($xls_file_path, 'Tender-XLS', $public_path);

  $download_filename = drupal_basename($tmp_path);
  $download_uri = $url . '/sites/default/files/' . $download_filename;

  $to                = $email;
  $mailManager       = \Drupal::service('plugin.manager.mail');
  $key               = 'tender_send';
  $langcode          = \Drupal::currentUser()->getPreferredLangcode();
  $send              = TRUE;
  $module            = 'pankm_custom';
  $params['message'] = 'Please click the following URL to download the tar file of the Tenders. ' . $download_uri;
  $params['site']    = $url;
  $from              = \Drupal::config('system.site')->get('mail');
  $current_time      = format_date(\Drupal::time()->getCurrentTime(), 'custom', 'Y-m-d, H:i:s');
  $result            = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);

  unlink($xls_file_path);

  if ($result['result'] != TRUE) {
    $message = t('@at | @base_url | There was a problem sending the email to @email from @from', ['@base_url' => $url, '@email' => $to, '@from' => $from, '@at' => $current_time]);
    drush_print($message);
    \Drupal::logger('mail-log')->error($message);
    return;
  }
  elseif ($result['result'] == TRUE) {
    $message = t('@at | @base_url | An email notification has been sent to the email to @email from @from', ['@base_url' => $url, '@email' => $to, '@from' => $from, '@at' => $current_time]);
    drush_print($message);
    \Drupal::logger('mail-log')->notice($message);
  }
}

/**
 * Function download all supplier form.
 */
function supplier_command_line($id, $email, $url) {
  global $base_url;
  $webform_id = 'suppliers_registration_form';
  /*Load webform*/
  $webform = Webform::load($webform_id);

  /*Call exporter service*/
  $submission_exporter = \Drupal::service('webform_submission.exporter');
  $export_options      = $submission_exporter->getDefaultExportOptions();

  $export_options['delimiter']          = ',';
  $export_options['multiple_delimiter'] = ',';
  $export_options['download']           = TRUE;
  $export_options['exporter']           = 'table';
  $export_options['excel']              = TRUE;

  $export_options['excluded_columns'] = [
    'uuid' => 'uuid',
    'token' => 'token',
    'webform_id' => 'webform_id',
     // 'serial' => 'serial',
    'uri' => 'uri',
     // 'created' => 'created',
    'completed' => 'completed',
    'changed' => 'changed',
    'in_draft' => 'in_draft',
    'current_page' => 'current_page',
    'remote_addr' => 'remote_addr',
    'uid' => 'uid',
    'langcode' => 'langcode',
    'entity_type' => 'entity_type',
    'entity_id' => 'entity_id',
    'sticky' => 'sticky',
    'notes' => 'notes',
    'metatag' => 'metatag',
  ];
  $export_options['files']            = TRUE;
  $export_options['file_name']        = '[webform_submission:values:name_of_company:raw]-[webform_submission:serial]';

  $submission_exporter->setWebform($webform);
  $submission_exporter->setExporter($export_options);

  $sids = explode(',', $id);
  foreach ($sids as $sid) {
    if ($sid != NULL) {
      $entity_ids[] = $sid;
    }
  }

  $webform_submissions = WebformSubmission::loadMultiple($entity_ids);

  $submission_exporter->writeHeader();
  $submission_exporter->writeRecords($webform_submissions);
  $submission_exporter->writeFooter();
  $submission_exporter->getBatchLimit();
  $submission_exporter->writeExportToArchive();

  $download_uri = $url . '/admin/structure/webform/manage/suppliers_registration_form/results/download/file/suppliers_registration_form.tar.gz';

  $to                = $email;
  $mailManager       = \Drupal::service('plugin.manager.mail');
  $key               = 'supplier_send';
  $langcode          = \Drupal::currentUser()->getPreferredLangcode();
  $send              = TRUE;
  $module            = 'pankm_custom';
  $params['message'] = 'Please click the following URL to download the tar file of Suppliers Registration Form. ' . $download_uri;
  $params['site']    = $url;
  $from              = \Drupal::config('system.site')->get('mail');
  $current_time      = format_date(\Drupal::time()->getCurrentTime(), 'custom', 'Y-m-d, H:i:s');

  $result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send);

  if ($result['result'] != TRUE) {
    $message = t('@at | @base_url | There was a problem sending the email to @email from @from', ['@base_url' => $url, '@email' => $to, '@from' => $from, '@at' => $current_time]);
    drush_print($message);
    \Drupal::logger('mail-log')->error($message);
    return;
  }
  elseif ($result['result'] == TRUE) {
    $message = t('@at | @base_url | An email notification has been sent to the email to @email from @from', ['@base_url' => $url, '@email' => $to, '@from' => $from, '@at' => $current_time]);
    drush_print($message);
    \Drupal::logger('mail-log')->notice($message);
  }

}

/**
 * Impliments hook_mail()
 */
function pankm_custom_mail($key, &$message, $params) {
  $options = ['langcode' => $message['langcode']];
  $url = $params['site'];
  if ($key == 'tender_send') {
    $message['from']    = \Drupal::config('system.site')->get('mail');
    $message['subject'] = t('NEPAD Tenders Download (' . $url . ')');
    $message['body'][]  = $params['message'];
  }
  if ($key == 'supplier_send') {
    $message['from']    = \Drupal::config('system.site')->get('mail');
    $message['subject'] = t('NEPAD Suppliers Registration Form Download (' . $url . ')');
    $message['body'][]  = $params['message'];
  }
}











______________________________________________________________________________











<?php

namespace Drupal\agenda_template\Form;

// require(__DIR__ . '/../../../PHPExcel/Classes/PHPExcel.php');
include_once __DIR__ . '/../../../PHPExcel/Classes/PHPExcel.php';
include_once __DIR__ . '/SimpleXLSX.php';

use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\file\Entity\File;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Ajax\OpenModalDialogCommand;
use Drupal\Core\Url;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Ajax\CssCommand;


/**
 * Impliment class Custom template.
 */
class CustomTemplateForm extends FormBase {

  /**
   * Function to set form id.
   */
  public function getFormId() {
    return 'agenda_template';
  }

/**
* setting access
*/
 public function checkAccess($node) {
  $actualNode = Node::load($node);
  $access = FALSE;
  if($actualNode->bundle() === 'agenda_dashboard_data'){
    $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
    $roles = $user->getRoles();
    $agenda_role = $user->field_agenda_dashboard_roles->value;
    $agenda_roles = ['country_member', 'country_head', 'region_head','agenda_admin'];
    if(((in_array('administrator', $roles)) || (in_array('agenda_subsite_admin', $roles))) && (in_array($agenda_role, $agenda_roles))){
        $country_id = $user->get('field_agenda_countries')->getValue();
        foreach ($country_id as $key => $value) {
          $country_array[] = $value['target_id'];
        }
        $node_country_id = $actualNode->field_agenda_country->target_id;
        if(in_array($node_country_id, $country_array)){
           $access = TRUE;
        }
      }
    }
   return AccessResult::allowedif($access == TRUE);
 }

  /**
   * {@inheritdoc}
   */
public function buildForm(array $form, FormStateInterface $form_state) {

  for ($year = 2013; $year <= 2020 ; $year++) {  
     $options_year[$year] = $year;
  }
  $selected_year = \Drupal::request()->query->get('year');
  $selected_year_upload[$selected_year] = $selected_year;
  $selected_version = \Drupal::request()->query->get('version');

 $current_path = \Drupal::service('path.current')->getPath();
 $path_array = explode('/', $current_path);
 $nid = $path_array[2]; 
 $node_load = Node::load($nid);
 $country_id = $node_load->field_agenda_country->target_id;
 $country_term = Term::load($country_id);
 $country_label = "<div class='country-wrap'><span class='agenda-label'>Country:</span><span class='agenda-item'> " . $country_term->get('name')->getString() . "</span></div>";
 $year_label = "<div class='year-wrap'><span class='agenda-label'>Year:</span><span class='agenda-item'> " . $selected_year . "</span></div>";
 $set_label .= "<div class='country-year-wrap'>";
 $set_label .= $country_label . $year_label;
 $set_label .= "</div>";
 $review_stage = $node_load->field_review_stage->value;
 if($review_stage == NULL){
  $review_stage = 'open';
 }
 $base_require = FALSE;
 $base_lock = $node_load->field_lock_baseline->value;
 if($base_lock == 1){
   $base_require = TRUE;
 }

 $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
 $agenda_role = $user->field_agenda_dashboard_roles->value;
 $form_state->set('agenda_role', $agenda_role);
 $form_state->set('nid', $nid);
 $form_state->set('selected_version', $selected_version);
 $form_state->set('base_require', $base_require);
 switch ($agenda_role) {
  case 'country_member':
    $version = 1;
    break;
  case 'country_head':
    $version = 2;
    break;
  case 'region_head':
    $version = 3;
    break;
  case 'agenda_admin':
    $version = 4;
    break;
}
$form_state->set('version', $version);
$form_state->set('nid', $nid);

  $current_path = \Drupal::service('path.current')->getPath();
  $key_items = agenda_template_french_key_items();
  $lang_code = \Drupal::languageManager()->getCurrentLanguage()->getId();

  $options_aspiration = [];
  $aspirations = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('agenda_aspirations_template');
  $options_aspiration[0] = '-select-';
  if($lang_code == 'fr'){
    foreach($aspirations as $aspiration) {
    $aspiration_name = $aspiration->name;
    $aspiration_name =  ($key_items[trim($aspiration_name)] == "") ? $aspiration_name: $key_items[trim($aspiration_name)];
    $options_aspiration[$aspiration->tid] = $aspiration_name;
    }
  }
  else{
    foreach ($aspirations as $aspiration) {
      $options_aspiration[$aspiration->tid] = $aspiration->name;
    }
  }

  $form_state->set('country_id', $country_id);
  $options_goal[0] = '-select-';
  $options_priority[0] = '-select-';
  if($lang_code == 'fr'){
    $upload_link = "<a href='/fr/node/" . $nid . "/agenda-upload-form?year=" . $selected_year . "'>Add / Edit data using the form below or <b>Upload File</b></a>";
  }
  else
  {
    $upload_link = "<a href='/node/" . $nid . "/agenda-upload-form?year=" . $selected_year . "'>Add / Edit data using the form below or <b>Upload File</b></a>";
  }
  $set_update_label = "<div class='update-link'><span class='agenda-label'>" . $upload_link . "</span></div>";


  if(($agenda_role == 'region_head') || ($agenda_role == 'agenda_admin')){
    $form['#prefix'] = $set_update_label . '<div id="agenda_data_form" class="agenda-template-form">';
  }
  else{
    $form['#prefix'] = '<div id="agenda_data_form" class="agenda-template-form">';
  }
  $form['#suffix'] = '</div>';

  $form['country'] = [
  '#type' => 'label', 
  '#title' => $set_label,
  ];

 
  $form['year'] = [
    '#type' => 'hidden',
    '#title' => t('Year'),
    '#default_value' => $selected_year,
    '#validated' => TRUE,
    '#ajax' => [
    'callback' => '::priorityAjaxCallback', 
    'disable-refocus' => FALSE, 
    'event' => 'change',
    'wrapper' => 'edit-target', 
    'progress' => [
      'type' => 'throbber',
      'message' => $this->t('Verifying entry...'),
    ],
   ]
  ]; 

  $form['aspiration'] = [
    '#type' => 'select',
    '#title' => t('Aspirations'),
    '#options' => $options_aspiration,
    '#validated' => TRUE,
    '#prefix' => '<div class="agenda-items-warp"><div id="edit-aspiartion">',
    '#suffix' => '</div>',
    '#ajax' => [
    'callback' => '::aspAjaxCallback', 
    'disable-refocus' => FALSE, 
    'event' => 'change',
    'wrapper' => 'edit-goal', 
    'progress' => [
      'type' => 'throbber',
      'message' => $this->t('Verifying entry...'),
    ],
  ]
  ];
  $form['goal'] = [
    '#type' => 'select',
    '#title' => t('Goals'),
    '#options' => $options_goal,
    '#validated' => TRUE,
    '#prefix' => '<div id="edit-goal">',
    '#suffix' => '</div>',
    '#ajax' => [
    'callback' => '::goalAjaxCallback', 
    'disable-refocus' => FALSE, 
    'event' => 'change',
    'wrapper' => 'edit-priority', 
    'progress' => [
      'type' => 'throbber',
      'message' => $this->t('Verifying entry...'),
    ],
   ]
  ];  
  $form['priority'] = [
    '#type' => 'select',
    '#validated' => TRUE,
    '#title' => t('Priority Area'),
    '#options' => $options_priority,
    '#prefix' => '<div id="edit-priority">',
    '#suffix' => '</div>',
    '#ajax' => [
    'callback' => '::priorityAjaxCallback', 
    'disable-refocus' => FALSE, 
    'event' => 'change',
    'wrapper' => 'edit-target', 
    'progress' => [
      'type' => 'throbber',
      'message' => $this->t('Verifying entry...'),
    ],
   ]
  ];

 $form['table_set'] = [
    '#validated' => TRUE,
    '#prefix' => '<div id="edit-target">',
    '#suffix' => '</div></div>',
  ];

  $form['actions']['#type'] = 'actions'; 

  if(($review_stage == $version) || ($review_stage == 'open')){
    $form['actions']['submit_save'] = [
      '#type' => 'submit',
      '#value' => $this->t('Save Data'),
      '#button_type' => 'primary',
      '#ajax' => [
        'callback' => '::agenda_data_form_submit',
        'wrapper' => 'agenda_data_form',
        'method' => 'replace',
        'effect' => 'fade',
        'progress' => [
          'type' => 'throbber',
          'message' => $this->t('Please wait...'),
        ],
      ],
      '#attributes' => [
        'class' => [
        'agenda-save-button' 
        ],
      'title' => t("Save the Data"),
      ],
    ]; 
  }  

  // $form['actions']['submit_json'] = [
  //   '#type' => 'submit',
  //   '#value' => $this->t('Visualize'),
  //   '#button_type' => 'primary',
  //   '#submit' => array('::agenda_data_json_submit'),
  //   '#attributes' => [
  //     'class' => [
  //       'agenda-preview-button' 
  //       ],
  //     'title' => t("Visualize the Data in Map and Charts"),
  //   ],
  // ];  

  $form['actions']['create_xlsx'] = [
    '#type' => 'submit',
    '#value' => $this->t('Create Xlsx'),
    '#button_type' => 'primary',
    '#submit' => array('::agenda_dashboard_create_xlsx'),
    '#attributes' => [
      'title' => t("Download the Data in Xlsx Format"),
    ],
  ];  

  // $form['actions']['create_json'] = [
  //   '#type' => 'submit',
  //   '#value' => $this->t('Custom Run'),
  //   '#button_type' => 'primary',
  //   '#submit' => array('::agenda_data_mail_submit'),
  // ];  


  $form['actions']['submite_color'] = [
  '#type' => 'submit',
  '#value' => $this->t('Colorize'),
  '#button_type' => 'primary',
  '#ajax' => [
    'callback' => '::ColorCallback',
    'wrapper' => 'edit-color',
    'effect' => 'fade',
    'progress' => [
      'type' => 'throbber',
      'message' => $this->t('Please wait...'),
    ],
  ],
  '#attributes' => [
  'class' => [
  'hidden' 
  ],
  'title' => t("Apply the Color Code"),
  ],
]; 

$form['actions']['submit_preview'] = [
  '#type' => 'submit',
  '#value' => $this->t('Preview'),
  '#button_type' => 'primary',
  '#submit' => array('::agenda_dashboard_preview_display'),
  '#attributes' => [
    'title' => t("Preview the Data in a Xlsx Format"),
  ],
];  


if(($review_stage == $version) || ($review_stage == 'open')){
  switch ($agenda_role) {
    case 'country_member':
      $form['actions']['submit_review'] = [
        '#type' => 'submit',
        '#value' => $this->t('Submit to Country head'),
        '#button_type' => 'primary',
        '#submit' => array('::agenda_data_review_submit'),
        '#attributes' => [
        'class' => [
          'agenda-review-button' 
          ],
        'title' => t("Submit to Country head for Approving the data"),
        ],
      ];
      break;
    case 'country_head':
      $form['actions']['submit_review'] = [
        '#type' => 'submit',
        '#value' => $this->t('Submit to Region head'),
        '#button_type' => 'primary',
        '#submit' => array('::agenda_data_review_submit'),
        '#attributes' => [
        'class' => [
          'agenda-review-button' 
          ],
        'title' => t("Submit to Region head for Approving the data"),
        ],
      ];
      break;
    case 'region_head':
      $form['actions']['submit_review'] = [
        '#type' => 'submit',
        '#value' => $this->t('Submit to AUDA NEPAD Admin'),
        '#button_type' => 'primary',
        '#submit' => array('::agenda_data_review_submit'),
        '#attributes' => [
        'class' => [
          'agenda-review-button' 
          ],
        'title' => t("Submit to AUDA NEPAD Admin for Approving the data"),
        ],
      ];
      break;
    case 'agenda_admin':
      $form['actions']['submit_review'] = [
        '#type' => 'submit',
        '#value' => $this->t('Publish'),
        '#button_type' => 'primary',
        '#submit' => array('::agenda_data_publish_submit'),
        '#attributes' => [
        'class' => [
          'agenda-review-button' 
          ],
        'title' => t("Publish the Data on the Frontend Dashboard"),
        ],
      ];
      break;
    
    default:
      break;
  }
}

$form['#attached']['library'][] = 'core/drupal.dialog.ajax';

return $form;
}


 
/**
 * Impliment AJAX callback
 */
public function ColorCallback(array &$form, FormStateInterface $form_state) {

    $UserInputs = $form_state->getUserInput();
    $flag = 0;
    $response = new AjaxResponse();
    foreach ($UserInputs as $key => $value) {
      if(substr($key, 0, 13) == "current_value"){
        $indicator_check = explode('current_value_', $key);
        $indicator_id = $indicator_check[1];
        $current_value = $value;
      }
      elseif ($key == 'base_value_'.$indicator_id) {
        $base_value = $value;
      }
      elseif ($key == 'excel_row_'.$indicator_id) {
        $excel_row = $value;
        $flag = 1;
      }
      if($flag == 1){
        $color_code = \Drupal\agenda_template\Controller\IndicatorColor::get_indicator_color_code($excel_row, $current_value, $base_value);
        $css = ['background-color' => $color_code];
        $inputcss = ['background-color' => '#FFFFFF'];
        $response->addCommand(new CssCommand('#edit-color-' . $indicator_id , $css));
        $response->addCommand(new CssCommand('#edit-color-' . $indicator_id .' input', $inputcss));
        $flag = 0;
      }     
    }

  return $response;

}


/**
 * Impliment AJAX callback
 */
public function aspAjaxCallback(array &$form, FormStateInterface $form_state) {
  if ($aspiartionValue = $form_state->getValue('aspiration')) {
    $lang_code = \Drupal::languageManager()->getCurrentLanguage()->getId();
    $key_items = agenda_template_french_key_items();
    $query = \Drupal::entityQuery('taxonomy_term');
    $query->condition('vid', 'agenda_goals_template');
    $query->condition('field_agenda_2063_aspirations', $aspiartionValue);
    $goals = $query->execute();
    $options_goal[0] = '-select-';
    if($lang_code == 'fr'){
      foreach ($goals as $goal) {
        $goal_load = Term::load($goal);
        $goal_name = $goal_load->get('name')->getString();
        $goal_name =  ($key_items[trim($goal_name)] == "") ? $goal_name: $key_items[trim($goal_name)];
        $options_goal[$goal_load->id()] = $goal_name;
      }
    }
    else{
      foreach ($goals as $goal) {
        $goal_load = Term::load($goal);
        $options_goal[$goal_load->id()] = $goal_load->get('name')->getString();
      }
    }
    $form['goal']['#options'] = $options_goal;
  }
  return $form['goal']; 
}

/**
 * Impliment AJAX callback
 */
public function goalAjaxCallback(array &$form, FormStateInterface $form_state) {
  if($goalValue = $form_state->getValue('goal')) {
    $lang_code = \Drupal::languageManager()->getCurrentLanguage()->getId();
    $key_items = agenda_template_french_key_items();
    $query = \Drupal::entityQuery('taxonomy_term');
    $query->condition('vid', 'agenda_priority_template');
    $query->condition('field_goals', $goalValue);
    $prioritys = $query->execute();
    $options_priority[0] = '-select-';
    if($lang_code == 'fr'){
      foreach ($prioritys as $priority) {
        $priority_load = Term::load($priority);
        $priority_name = $priority_load->get('name')->getString();
        $priority_name =  ($key_items[trim($priority_name)] == "") ? $priority_name: $key_items[trim($priority_name)];
        $options_priority[$priority_load->id()] = $priority_name;
      }
    }
    else{
      foreach ($prioritys as $priority) {
        $priority_load = Term::load($priority);
        $options_priority[$priority_load->id()] = $priority_load->get('name')->getString();
      }
    }
    $form['priority']['#options'] = $options_priority;
  }
  return $form['priority']; 
}

/**
 * Impliment AJAX callback
 */
public function priorityAjaxCallback(array &$form, FormStateInterface $form_state) {
  if(($priorityValue = $form_state->getValue('priority')) && ($yearValue = $form_state->getValue('year'))){
     $lang_code = \Drupal::languageManager()->getCurrentLanguage()->getId();
     $key_items = agenda_template_french_key_items();
     $country_id = $form_state->get('country_id');
     $selected_version = $form_state->get('selected_version');
     $version = $form_state->get('version');
     $base_require = $form_state->get('base_require');
     $form['table_set'] = [
    '#validated' => TRUE,
    '#prefix' => '<div id="edit-target" class="table-main-wrap table-style-1"><div class="table-responsive"><table border=1><thead><tr>
                  <th>Agenda 2063 Target</th>
                  <th>Agenda 2063 Indicators</th>
                  <th>Unit</th>
                  <th>Current Value</th>
                  <th>Base Value</th>
                  <th>Color</th>
                  <th>Date of Entry/Update</th>
                  <th>Data Source (Sources)</th>
                  <th>Year Data Reported was Published</th>
                  <th>Remarks</th>
                  </tr></thead>',
    '#suffix' => '</table></div></div></div>',
  ];
    $query = \Drupal::entityQuery('taxonomy_term');
    $query->condition('vid', 'agenda_targets_template');
    $query->condition('field_priority_area', $priorityValue);
    $query->sort('weight', 'ASC'); 
    $targets = $query->execute();
    foreach ($targets as $target) {
      $ind_count = 0;
      $query = \Drupal::entityQuery('taxonomy_term');
      $query->condition('vid', 'agenda_indicator_template');
      $query->condition('field_targets', $target);
      $indicators = $query->execute();
      foreach ($indicators as $indicator) {
          $ind_count++;
      }
      $target_load = Term::load($target);
      $target_name = $target_load->get('name')->getString();
      if($lang_code == 'fr'){
        $target_name =  ($key_items[trim($target_name)] == "") ? $target_name: $key_items[trim($target_name)];
      }
      $form['table_set']['target_'.$target] = [
      '#type' => 'label', 
      '#title' => $target_name,
      '#size' => 25,
      '#prefix' => '<tr><td rowspan=' . $ind_count . '>',
      '#suffix' => '</td>',
      ];

    foreach ($indicators as $indicator) {
      $current_value = $date_entry = $data_source = $publish_year = $remarks = NULL;
      $indicator_load = Term::load($indicator);
      $unit_value = ($indicator_load->get('field_agenda_unit')->getString() == NULL ) ? '--' : $indicator_load->get('field_agenda_unit')->getString();
      $excel_row = ($indicator_load->get('field_excel_row_number')->getString() == NULL ) ? "" : $indicator_load->get('field_excel_row_number')->getString();
      $date_today = format_date(\Drupal::time()->getCurrentTime(), 'custom', 'Y-m-d');

      if($selected_version == "draft"){
        $query = \Drupal::database()->select('indicator_data_draft', 'ind'); 
        $query->fields('ind', ['indicator_id','current_value','base_value','date_entry','data_source','publish_year','remarks','year','country_id','version']);
        $query->condition('ind.indicator_id', $indicator, "=");
        $query->condition('ind.country_id', $country_id, "=");
        $query->condition('ind.year', $yearValue, "=");
       //$query->condition('ind.version', $version, "=");
        $results = $query->execute();
      }
      elseif($_SESSION['agenda_check']['data_'.$country_id.$indicator_id.$yearValue.$selected_version] == 1) {
        $query = \Drupal::database()->select('indicator_data_draft', 'ind'); 
        $query->fields('ind', ['indicator_id','current_value','base_value','date_entry','data_source','publish_year','remarks','year','country_id','version']);
        $query->condition('ind.indicator_id', $indicator, "=");
        $query->condition('ind.country_id', $country_id, "=");
        $query->condition('ind.year', $yearValue, "=");
       // $query->condition('ind.version', $selected_version, "=");
        $results = $query->execute();
      }
      else {
        $query = \Drupal::database()->select('indicator_data_main', 'ind'); 
        $query->fields('ind', ['indicator_id','current_value','base_value','date_entry','data_source','publish_year','remarks','year','country_id','version']);
        $query->condition('ind.indicator_id', $indicator, "=");
        $query->condition('ind.country_id', $country_id, "=");
        $query->condition('ind.year', $yearValue, "=");
        $query->condition('ind.version', $selected_version, "=");
        $results = $query->execute();
      }
      $date_entry = format_date(\Drupal::time()->getCurrentTime(), 'custom', 'Y-m-d');
      foreach ($results as $key => $value) {
       $current_value = $value->current_value;
       $base_value = $value->base_value;
       $date_entry = $value->date_entry;
       $data_source = $value->data_source;
       $publish_year = $value->publish_year;
       $remarks = $value->remarks;
      }
      $indicator_name = $indicator_load->get('name')->getString();
      if($lang_code == 'fr'){
        $indicator_name =  ($key_items[trim($indicator_name)] == "") ? $indicator_name: $key_items[trim($indicator_name)];
      }

        $form['table_set']['indicator_'.$indicator] = [
        '#type' => 'label', 
        '#title' => $indicator_name,
        '#size' => 25,
        '#name' => 'indicator_'.$indicator,
        '#prefix' => '<td>',
        '#suffix' => '</td>',
        ];
        $form['table_set']['unit_'.$indicator] = [
        '#type' => 'label', 
        '#title' => $unit_value,
        '#size' => 5,
        '#name' => 'unit_'.$indicator,
        '#prefix' => '<td>',
        '#suffix' => '</td>',
        ];
        $form['table_set']['current_value_'.$indicator] = [
        '#type' => 'textfield', 
        '#size' => 10,
        '#name' => 'current_value_'.$indicator,
        '#required' => TRUE,
        '#attributes' => [
          'class' => [
          'agenda-color' 
          ],
        ],
        '#prefix' => '<td>',
        '#value' => $current_value,
        '#suffix' => '</td>',
        ]; 
        $form['table_set']['base_value_'.$indicator] = [
        '#type' => 'textfield', 
        '#size' => 6,
        '#attributes' => [
          'disabled' => $base_require,
          'class' => [
          'agenda-color' 
          ],
         ],
        '#name' => 'base_value_'.$indicator,
        '#prefix' => '<td>',
        '#value' => $base_value,
        '#suffix' => '</td>',
        ];
        $form['table_set']['color_code_'.$indicator] = [
        '#type' => 'label', 
        '#size' => 5,
        '#prefix' => '<td id="edit-color-'.$indicator.'">',
        '#suffix' => '</td>',
        ]; 
        $form['table_set']['excel_row_'.$indicator] = [
        '#type' => 'hidden', 
        '#title' => $excel_row,
        '#name' => 'excel_row_'.$indicator,
        '#value' => $excel_row,
        ];
        $form['table_set']['date_'.$indicator] = [
        '#name' => 'date_'.$indicator,
        '#type' => 'date',
        '#size' => 6,
        '#date_format' => 'Y-m-d',
        '#attributes' => [
          'id' => [
          'date-picker' 
          ],
         ],
        '#value' => $date_entry,
        '#prefix' => '<td>',
        '#suffix' => '</td>',
        ];

        $form['table_set']['data_source_'.$indicator] = [
        '#type' => 'textfield', 
        '#size' => 20,
        '#value' => $data_source,
        '#name' => 'data_source_'.$indicator,
        '#prefix' => '<td>',
        '#suffix' => '</td>', 
        ];        
        $form['table_set']['year_report_'.$indicator] = [
        '#type' => 'textfield', 
        '#size' => 15,
        '#value' => $publish_year,
        '#name' => 'year_report_'.$indicator,
        '#attributes' => [
          ' type' => 'number',
         ],
        '#prefix' => '<td>',
        '#suffix' => '</td>',
        ];        
        $form['table_set']['remark_'.$indicator] = [
        '#type' => 'textarea', 
        '#size' => 20,
        '#value' => $remarks,
        '#name' => 'remark_'.$indicator,
        '#prefix' => '<td>',
        '#suffix' => '</td></tr>',
        ];
      }
    }
  }
  return $form['table_set']; 
}


/**   
  * AJAX callback handler that displays any errors or a success message.  
  */
  public function submitModalFormAjax(array $form, FormStateInterface $form_state) {

    $response = new AjaxResponse();
    if ($form_state->hasAnyErrors()) {
      $response->addCommand(new ReplaceCommand('#agenda_data_form', $form));
    }
    else {
      $response->addCommand(new OpenModalDialogCommand("Success!", 'The submit section is in progress.', ['width' => 800]));
    }

    return $response;
  }



  /**
   * Hook_submitForm.
   */
  public function agenda_dashboard_preview_display(array &$form, FormStateInterface $form_state) {

    $nid = $form_state->get('nid');
    $yearValue = $form_state->getValue('year');
    $selected_version = $form_state->get('selected_version');
    $dest_url = "/agenda-dashboard-preview-form/" . $nid . "?year=" . $yearValue . "&version=" . $selected_version;
    $url = Url::fromUri('internal:' . $dest_url);
    $form_state->setRedirectUrl($url);
  }

  /**
   * Hook_submitForm.
   */
  public function agenda_data_form_submit(array &$form, FormStateInterface $form_state) {

    $country_id = $form_state->get('country_id');
    $yearValue = $form_state->getValue('year');
    $version = $form_state->get('version');
    $selected_version = $form_state->get('selected_version');
    $UserInputs = $form_state->getUserInput();
    $this->agenda_data_save_data($country_id, $yearValue, $UserInputs, $version, $selected_version);
    if($version == 4){
      $version_table = 4;
      $query = \Drupal::database()->update('indicator_data_draft'); 
      $query->condition('country_id', $country_id, "=");
      $query->condition('year', $yearValue, "=");
      $query->fields([
        'version' => $version_table,
      ]);
      $query->execute();
    }
    $response = new AjaxResponse();
    if ($UserInputs['priority'] != 0) {
      $response->addCommand(new OpenModalDialogCommand("Success", 'The Submit Data is Saved.', ['width' => 800]));
    }
    else
    {
      $response->addCommand(new OpenModalDialogCommand('No Changes Found', 'Please Update the Data', ['width' => 800]));
    }
    return $response;
  }
  /**
   * Hook_submitForm.
   */
  public function agenda_data_publish_submit(array &$form, FormStateInterface $form_state) {
    $country_id = $form_state->get('country_id');
    $nid = $form_state->get('nid');
    $yearValue = $form_state->getValue('year');
    $version = $form_state->get('version');
    $selected_version = $form_state->get('selected_version');
    $UserInputs = $form_state->getUserInput();
    $this->agenda_data_save_data($country_id, $yearValue, $UserInputs, $version, $selected_version);
    $agenda_role = $form_state->get('agenda_role');

    $query = \Drupal::database()->select('indicator_data_draft');
    $query->addExpression('MAX(version)');
    $query->condition('country_id', $country_id, "=");
    $query->condition('year', $yearValue, "=");
    $max_version = $query->execute()->fetchField();

    $query_latest = \Drupal::database()->select('indicator_data_main');
    $query_latest->addExpression('MAX(version)');
    $query_latest->condition('country_id', $country_id, "=");
    $query_latest->condition('year', $yearValue, "=");
    $latest_version = $query_latest->execute()->fetchField();
    $next_version = $latest_version + 1;

    if($agenda_role == 'agenda_admin'){
      $query = \Drupal::database()->select('indicator_data_draft', 'ind'); 
      $query->fields('ind', ['indicator_id','current_value','base_value','date_entry','data_source','publish_year','remarks','year','country_id','version']);
      $query->condition('ind.country_id', $country_id, "=");
      $query->condition('ind.year', $yearValue, "=");
      // $query->condition('ind.version', $max_version, "=");
      $results = $query->execute();
      foreach ($results as $key => $value) {
        $indicator_id = $value->indicator_id;
          $insert_values = [
            'indicator_id' => $value->indicator_id,
            'current_value' => $value->current_value,
            'base_value' => $value->base_value,
            'date_entry' => $value->date_entry,
            'data_source' => $value->data_source,
            'publish_year' => (int)$value->year_report,
            'remarks' => $value->remarks,
            'year' => $value->year,
            'country_id' => $value->country_id,
            'version' => $next_version,
          ];
          $connection = \Drupal::service('database');
          $query_insert = $connection->insert('indicator_data_main')->fields(['indicator_id', 'current_value', 'base_value' , 'date_entry','data_source','publish_year','remarks','year','country_id','version']);
          $query_insert->values($insert_values);
          $query_insert->execute();
          \Drupal::messenger()->addMessage('Inserted into table'); 
      }
      $version_stage = 1;
      $this->agenda_dashboard_publish_combine($yearValue);
      $this->agenda_dashboard_latest_combine($yearValue);
      agenda_dashboard_region_nodes_combine($yearValue);
      $this->agenda_data_review_stage_update($nid, $version_stage, $yearValue);
      $this->agenda_data_draft_table_update($country_id, $yearValue);
      $uid = \Drupal::currentUser()->id();
      agenda_template_build_mail($agenda_role, $uid, $nid, $yearValue);
      unset($_SESSION['agenda_check']);
    }
  }
  
  /**
   * draft table update
   */
  public function agenda_data_draft_table_update($country_id, $yearValue) {

    if(!empty($country_id)){
      $query = \Drupal::database()->update('indicator_data_draft');
      $query->condition('country_id', $country_id, "=");
      $query->condition('year', $yearValue, "=");
      $query->fields([
        'version' => 1,
      ]);
      $query->execute();
    }

  }
  
  /**
   * Hook_submitForm.
   */
  public function agenda_data_review_submit(array &$form, FormStateInterface $form_state) {
    $version = $form_state->get('version');
    $nid = $form_state->get('nid');
    $country_id = $form_state->get('country_id');
    $yearValue = $form_state->getValue('year');
    $agenda_role = $form_state->get('agenda_role');
    if($version > 0){
      $version_table = $version + 1;
      $query = \Drupal::database()->update('indicator_data_draft'); 
      $query->condition('country_id', $country_id, "=");
      $query->condition('year', $yearValue, "=");
      $query->fields([
        'version' => $version_table,
      ]);
      $query->execute();
      \Drupal::messenger()->addMessage('Your request have been send to higher team.');  
      $version_stage = $version + 1;
      $this->agenda_data_review_stage_update($nid, $version_stage, $yearValue);
      if(($agenda_role == 'country_member') || ($agenda_role == 'country_head')){
        $dest_url = "/dashboard";
      }
      elseif($agenda_role == 'region_head') {
        $dest_url = "/manage-agenda-countries";
      }
      $url = Url::fromUri('internal:' . $dest_url);
      $form_state->setRedirectUrl($url);
      unset($_SESSION['agenda_check']);
      $uid = \Drupal::currentUser()->id();
      agenda_template_build_mail($agenda_role, $uid, $nid, $yearValue);
    }
  }

   /**
   * Hook_submitForm.
   */
  public function agenda_data_mail_submit(array &$form, FormStateInterface $form_state) {
    $year = '2020';

   $this->agenda_dashboard_latest_combine($year);
    $this->agenda_dashboard_publish_combine($year);
    // agenda_dashboard_region_nodes_combine($year);
  }

  /**
   * update the node field
   */
  public function agenda_data_review_stage_update($nid, $version, $yearValue) {

  $node_load = Node::load($nid);
  $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
  $agenda_role = $user->field_agenda_dashboard_roles->value;
  $user_name = $user->get('name')->value;
  $uid = $user->get('uid')->value;
  $date = format_date(\Drupal::time()->getCurrentTime(), 'custom', 'Y-F-d h:i:s a');
  $user_details = $user_name . "(" . $agenda_role . ") has submitted the data of the Year:" . $yearValue . " on " . $date;

  $node_load->field_person_details[] = $user_details;
  $node_load->field_review_stage->value = $version;   
  $node_load->save();
  }

  /**
   * save into table
   */
  public function agenda_data_save_data($country_id, $yearValue, $UserInputs, $version, $selected_version) {

    $flag = 0;
    foreach ($UserInputs as $key => $value) {
      if(substr($key, 0, 13) == "current_value"){
        $indicator_check = explode('current_value_', $key);
        $indicator_id = $indicator_check[1];
        $current_value = $value;
      }
      elseif ($key == 'base_value_'.$indicator_id) {
        $base_value = $value;
      }
      elseif ($key == 'excel_row_'.$indicator_id) {
        $excel_row = $value;
      }
      elseif ($key == 'date_'.$indicator_id) {
        $date_entry = $value;
      }
      elseif ($key == 'data_source_'.$indicator_id) {
        $data_source = $value;   
      }
      elseif ($key == 'year_report_'.$indicator_id) {
        $year_report = $value;
      }
      elseif ($key == 'remark_'.$indicator_id) {
        $remarks = $value;
        $flag = 1;
      }
      if($flag == 1){
        $query_check = \Drupal::database()->select('indicator_data_draft', 'ind'); 
        $query_check->fields('ind', ['indicator_id']);
        $query_check->condition('ind.country_id', $country_id, "=");
        $query_check->condition('ind.year', $yearValue, "=");
        $query_check->condition('ind.indicator_id', $indicator_id, "=");
        $result_check = $query_check->execute()->fetchAll();
        $count = count($result_check);
        if($count > 0){
            $update_values = [
              'excel_row_number' => (int)$excel_row,
              'current_value' => $current_value,
              'base_value' => $base_value,
              'date_entry' => $date_entry,
              'data_source' => $data_source,
              'publish_year' => (int)$year_report,
              'remarks' => $remarks,
              'year' => $yearValue,
              'version' => $version,
             ];
            $query_update = \Drupal::database()->update('indicator_data_draft');
            $query_update->condition('indicator_id', $indicator_id, "=");
            $query_update->condition('country_id', $country_id, "=");
            $query_update->condition('year', $yearValue, "=");
            $query_update->fields($update_values);
            $query_update->execute();
            // \Drupal::messenger()->addMessage('Data updated'); 
            $flag = 0;
        }
        else{
          $insert_values = [
          'indicator_id' => $indicator_id,
          'excel_row_number' => (int)$excel_row,
          'current_value' => $current_value,
          'base_value' => $base_value,
          'date_entry' => $date_entry,
          'data_source' => $data_source,
          'publish_year' => (int)$year_report,
          'remarks' => $remarks,
          'year' => $yearValue,
          'country_id' => $country_id,
          'version' => $version,
        ];
        $connection = \Drupal::service('database');
        $query_insert = $connection->insert('indicator_data_draft')->fields(['indicator_id', 'excel_row_number', 'current_value', 'base_value' , 'date_entry','data_source','publish_year','remarks','year','country_id','version']);
        $query_insert->values($insert_values);
        $query_insert->execute();
        // \Drupal::messenger()->addMessage('Inserted into table'); 
        $flag = 0;
        }
      }
      $_SESSION['agenda_check']['data_'.$country_id.$indicator_id.$yearValue.$selected_version] = 1;
    }
  }


  /**
   * Hook_submitForm.
   */
  public function agenda_data_json_submit(array &$form, FormStateInterface $form_state) {

  $country_id = $form_state->get('country_id');
  $nid = $form_state->get('nid');
  $yearValue = $form_state->getValue('year');
  $version = $form_state->get('version');
  $UserInputs = $form_state->getUserInput();
  //$this->agenda_data_save_data($country_id, $yearValue, $UserInputs, $version, $selected_version);
  $this->agenda_dashboard_form_combine($yearValue);
  $dest_url = "/agenda-dashboard-preview/" . $nid . "?year=" . $yearValue;
  $url = Url::fromUri('internal:' . $dest_url);
  $form_state->setRedirectUrl($url);

  }

 /**
   * custom function for generate xlxs file
   */
  public function agenda_dashboard_create_xlsx(array &$form, FormStateInterface $form_state) {

  $country_id = $form_state->get('country_id');
  $current_year = $form_state->getValue('year');
  $version = $form_state->get('version');
  $selected_version = $form_state->get('selected_version');
  $public_path = drupal_realpath('public://');
  $lang_code = \Drupal::languageManager()->getCurrentLanguage()->getId();

  if($selected_version == "draft"){
    $query = \Drupal::database()->select('indicator_data_draft', 'ind'); 
    $query->fields('ind', ['indicator_id','current_value','base_value','date_entry','data_source','publish_year','remarks','year','country_id','version']);
    $query->condition('ind.country_id', $country_id, "=");
    $query->condition('ind.year', $current_year, "=");
    $xlsx_results = $query->execute();
  }
  else {
    $query = \Drupal::database()->select('indicator_data_main', 'ind'); 
    $query->fields('ind', ['indicator_id','current_value','base_value','date_entry','data_source','publish_year','remarks','year','country_id','version']);
    $query->condition('ind.country_id', $country_id, "=");
    $query->condition('ind.year', $current_year, "=");
    $query->condition('ind.version', $selected_version, "=");
    $xlsx_results = $query->execute();
  }

  $xlsx_results_1 = $xlsx_results;
  $xlsx_results_2 = $xlsx_results;

  $country_term = Term::load($country_id);
  $country_name = $country_term->get('name')->getString();
  $module = drupal_get_path('module', 'agenda_template');
  $file_uri = $module . '/data/country/country_engine.xlsx'; 
  #$file_uri = $module . '/data/country/country_engine_clinton.xlsx'; 
  if ($phpExcel = \PHPExcel_IOFactory::createReader('Excel2007')) {
    $phpExcel = $phpExcel->load($file_uri);
    $sheet = $phpExcel->getActiveSheet();
    $maxCell = $sheet->getHighestRowAndColumn();
    $data_file = $sheet->rangeToArray('A1:' . $maxCell['column'] . $maxCell['row']);
    $sheet ->setCellValue('F4', $country_name);
  }
  \PHPExcel_Calculation::getInstance($phpExcel)->clearCalculationCache();
  \PHPExcel_Calculation::getInstance($phpExcel)->disableCalculationCache();
  

  /* loop one*/
  foreach($xlsx_results_1 as $key => $result_indicator) {
    $indicator_term = Term::load($result_indicator->indicator_id);
    $indicator = $indicator_term->get('name')->getString();
    $target_id = $indicator_term->get('field_targets')->target_id;
    for($i = 0; $i < count($data_file); $i++) {
      if(trim($indicator) == trim($data_file[$i][5])){
        $indicator_cell = "H" . ($i+1); 
        $base_cell = "I" . ($i+1);  
        $data_cell = "R" . ($i+1);  
        $remarks_cell = "S" . ($i+1);  
        $indicator_value = $result_indicator->current_value;
        $base_value = $result_indicator->base_value;
        $data_source = $result_indicator->data_source;
        $remarks = $result_indicator->remarks;
        $sheet->setCellValue($indicator_cell, $indicator_value);
        $sheet->setCellValue($base_cell, $base_value);
        $sheet->setCellValue($data_cell, $data_source);
        $sheet->setCellValue($remarks_cell, $remarks);
        
        $check_exp = "T" . ($i+1);
        $check_mode = "U" . ($i+1);
        $check_exp_value = $sheet->getCell($check_exp)->getCalculatedValue();
        $check_mode_value = $sheet->getCell($check_mode)->getCalculatedValue();
        $rate = $this->agenda_dashboard_expected_value_engine($target_id, $base_value, $current_year, $check_exp_value, $check_mode_value);

        $expected_cell = "K" . ($i+1);    
        $expected_increase = $rate['expected_increase'];
        $sheet->setCellValue($expected_cell, $expected_increase); 
      }
    }  
  } 

  #Goal 11      
  $check_value_M_65 = (float)$sheet->getCell("M65")->getCalculatedValue();
  if($check_value_M_65 == 100){ 
    $check_value_M_65 = $check_value_M_65 / 100; 
  }
  $check_value_M_74 = (float)$sheet->getCell("M74")->getCalculatedValue();
  $check_value_M_75 = (float)$sheet->getCell("M75")->getCalculatedValue();
  $check_value_M_76 = (float)$sheet->getCell("M76")->getCalculatedValue();
  
  $check_value_M_77 = (float)$sheet->getCell("M77")->getCalculatedValue();
  if($check_value_M_77 == 100){ 
    $check_value_M_77 = $check_value_M_77 / 100; 
  }
  
  $check_value_M_78 = (float)$sheet->getCell("M78")->getCalculatedValue();
  if($check_value_M_78 == 100){ 
    $check_value_M_78 = $check_value_M_78 / 100; 
  }  
  $check_value_M_90 = (float)$sheet->getCell("M90")->getCalculatedValue();
  if($check_value_M_90 == 100){ 
    $check_value_M_90 = $check_value_M_90 / 100; 
  }
  $check_value_M_79 = (float)$sheet->getCell("M79")->getCalculatedValue();
  $check_value_M_84 = (float)$sheet->getCell("M84")->getCalculatedValue();
  $check_value_M_86 = (float)$sheet->getCell("M86")->getCalculatedValue();
  $check_value_M_89 = (float)$sheet->getCell("M89")->getCalculatedValue();
  $sheet->setCellValue("M65",$check_value_M_65); 
  $sheet->setCellValue("M74",$check_value_M_74); 
  $sheet->setCellValue("M75",$check_value_M_75); 
  $sheet->setCellValue("M76",$check_value_M_76); 
  $sheet->setCellValue("M77",$check_value_M_77); 
  $sheet->setCellValue("M78",$check_value_M_78); 
  $sheet->setCellValue("M79",$check_value_M_79); 
  $sheet->setCellValue("M84",$check_value_M_84); 
  $sheet->setCellValue("M86",$check_value_M_86); 
  $sheet->setCellValue("M89",$check_value_M_89); 
  $sheet->setCellValue("M90",$check_value_M_90); 

  #Goal 19
  $check_value_M_109 = (float)$sheet->getCell("M109")->getCalculatedValue();        
  $check_value_M_110 = (float)$sheet->getCell("M110")->getCalculatedValue();
  $check_value_M_111 = (float)$sheet->getCell("M111")->getCalculatedValue();         

  if($check_value_M_109 == 100){ 
    $check_value_M_109 = $check_value_M_109 / 100; 
  }
  if($check_value_M_111 == 100){ 
    $check_value_M_111 = $check_value_M_111 / 100; 
  } 
  $sheet->setCellValue("M109",$check_value_M_109); 
  $sheet->setCellValue("M110",$check_value_M_110); 
  $sheet->setCellValue("M111",$check_value_M_111); 

  
  $file_name = $country_name."_".$current_year.".xlsx";
  $file_uri_save = $public_path . "/" . $file_name;

  $writer1 = \PHPExcel_IOFactory::createWriter($phpExcel, "Excel2007");
  $writer1->setPreCalculateFormulas(true);
  $writer1->save($file_uri_save); 

  $dest_url = "/sites/default/files/" . $file_name;
  if($lang_code == 'fr'){
    $this->agenda_template_french_xlsx_create($file_name);
  }
  $url = Url::fromUri('internal:' . $dest_url);
  $form_state->setRedirectUrl($url);

 }

 /**
 * To create the excluded country .
 */
public function agenda_template_french_xlsx_create($file_name) {
  $public_path = drupal_realpath('public://');
  $key_items = agenda_template_french_key_items();
  $file_uri = $public_path . '/' . $file_name;
  if ($phpExcel = \PHPExcel_IOFactory::createReader('Excel2007')) {
    $phpExcel = $phpExcel->load($file_uri);
    $sheet = $phpExcel->getActiveSheet();
    $data_file = $sheet->rangeToArray('A1:S117');
  }
  for($i = 0; $i < count($data_file); $i++) {
     for ($j = 1; $j <= 5; $j++) { 
       $item = $data_file[$i][$j];
       $item = $sheet->getCellByColumnAndRow($j, $i)->getValue();
       $item =  ($key_items[trim($item)] == "") ? $item: $key_items[trim($item)];
       $sheet->setCellValueByColumnAndRow($j, $i, $item);
     }
  }
  $writer1 = \PHPExcel_IOFactory::createWriter($phpExcel, "Excel2007");
  $writer1->setPreCalculateFormulas(true);
  $writer1->save($file_uri); 
}

/**************************************************************** Visulise*****************************************************/

/**
 * To create the excluded country .
 */
public function agenda_region_country_form_exclude($country_set, $key_items) {

  $vid = 'regional_clusters';
  $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid);
  foreach ($terms as $term) {
    $region_load = Term::load($term->tid);
    $region_countries = $region_load->get('field_countries')->getValue();
    foreach ($region_countries as $region_country) {
      if (!in_array($region_country['target_id'], $country_set)) {
        $region_name = $region_load->get('name')->getString();
        $region_name_fr = $key_items[trim($region_name)];
        if (empty($region_name_fr)) {
          $region_name_fr = $region_name;
        }
        $country_load = Term::load($region_country['target_id']);
        $country = $country_load->get('name')->getString();
        $country_fr = $key_items[trim($country)];
        if (empty($country_fr)) {
          $country_fr = $country;
        }
        $exclude_countries[$region_name][] = $country;
        $exclude_countries_fr[$region_name_fr][] = $country_fr;
      }
    }
  }
  $path     = drupal_realpath('public://');
  $destination = $path."/agenda_dashboard_preview/region";
  if (!file_exists($destination)) {
    mkdir($destination, 777, TRUE);
  }
  $map_data = $exclude_countries;
  $fp_a     = fopen($path . '/agenda_dashboard_preview/region/region_countries_exclude_en.json', 'w');
  $map_data = json_encode($map_data, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);
  $map_data = str_replace('\\', '', $map_data);
  $map_data = trim($map_data, '"');
  fwrite($fp_a, $map_data);
  fclose($fp_a);
  $map_data = $exclude_countries_fr;
  $fp_a     = fopen($path . '/agenda_dashboard_preview/region/region_countries_exclude_fr.json', 'w');
  $map_data = json_encode($map_data, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);
  $map_data = str_replace('\\', '', $map_data);
  $map_data = trim($map_data, '"');
  fwrite($fp_a, $map_data);
  fclose($fp_a);
}


/**
 * Function to load all xlsx files from the contents.
 */
public function agenda_dashboard_form_combine($yearValue) {

  $query = \Drupal::database()->select('indicator_data_draft', 'ind'); 
  $query->fields('ind', ['country_id']);
  $query->condition('ind.year', $yearValue, "=");
  $query->distinct();
  $full_results = $query->execute();

  if (!empty($full_results)) {
    $this->agenda_dashboard_form_data($full_results, $yearValue);
  }
}

/**
 * Implimenting the batch process.
 */
public function agenda_dashboard_form_data($full_results, $yearValue) {

  $current_path = \Drupal::service('path.current')->getPath();
  $path_array = explode('/', $current_path);
  $current_node = $path_array[2]; 
  $node_load = Node::load($current_node);
  $current_country = $node_load->field_agenda_country->target_id;
  $key_items = agenda_template_french_key_items();

  foreach ($full_results as $key => $country_data) {
    $country_id = $country_data->country_id;
    $country_set[] = $country_id;

    $query_country = \Drupal::database()->select('indicator_data_draft', 'ind'); 
    $query_country->fields('ind', ['indicator_id', 'current_value','base_value','year','country_id','version']);
    $query_country->condition('ind.year', $yearValue, "=");
    $query_country->condition('country_id', $country_id, "=");
    $country_results = $query_country->execute();
 
    $row = $this->agenda_dashboard_publish_xlxs_engine($xlsx_results, $yearValue, $country_id);
    $operations[] = ['\Drupal\agenda_template\Form\CustomTemplateForm::agenda_dashboard_form_data_json', [$row, $country_id, $key_items, $current_country]];
  }

  $this->agenda_region_country_form_exclude($country_set, $key_items);

  $batch = [
    'title' => t('Exporting the Agenda Dashboard'),
    'operations' => $operations,
    'finished' => '\Drupal\agenda_template\Form\CustomTemplateForm::agenda_dashboard_form_finished',
    'error_message' => t('The Creation encountered an error.'),
    'progress_message' => t('creating country profile @current of @total Countries. Please wait.'),
  ];
  batch_set($batch);

}

/**
 * Function to create json data from xls.
 */
function agenda_dashboard_form_data_json($row, $country_id, $key_items, $current_country, &$context) {

  $_SESSION['incre'] = 0;
  $country_term = Term::load($country_id);
  $country = $country_term->get('name')->getString();
  $country_fr = $key_items[trim($country)];
  if (empty($country_fr)) {
    $country_fr = $country;
  }

  $country_code = $country_term->get('field_country_key')->getString();
  $region_name = agenda_dashboard_load_regions($country_id);
  $region_name_fr = $key_items[trim($region_name)];
  if (empty($region_name_fr)) {
    $region_name_fr = $region_name;
  }
  $region_data[$region_name][] = $country;

  $public = drupal_realpath('public://');
  if (!empty($xlsx_download_uri)) {
    $xlsx_path = drupal_realpath($xlsx_download_uri);
    $country_xlsx_path = '/sites/default/files' . str_replace($public, '', $xlsx_path);
  }
  else {
    $country_xlsx_path = "No file available";
  }

  if (!empty($pdf_uri)) {
    $pdf_path = drupal_realpath($pdf_uri);
    $pdf_uri_path = '/sites/default/files' . str_replace($public, '', $pdf_path);
  }
  else {
    $pdf_uri_path = "No file available";
  }

  if (!empty($xlsx_download_uri_fr)) {
    $xlsx_path_fr = drupal_realpath($xlsx_download_uri_fr);
    $country_xlsx_path_fr = '/sites/default/files' . str_replace($public, '', $xlsx_path_fr);
  }
  else {
    $country_xlsx_path_fr = "No file available";
  }

  if (!empty($pdf_uri_fr)) {
    $pdf_path_fr = drupal_realpath($pdf_uri_fr);
    $pdf_uri_path_fr = '/sites/default/files' . str_replace($public, '', $pdf_path_fr);
  }
  else {
    $pdf_uri_path_fr = "No file available";
  }

  $data       = $row;
  $result     = $aspiration_list = $country_code = [];

  $asp_array  = ['8', '54', '71', '81', '90', '93', '106'];
  $goal_array = ['9', '21', '26', '36', '41', '47', '50', '55', '59', '63', '72', '79', '82', '84', '87', '91', '94', '100', '107', '111'];

  $start = 10;
  $k = $n = 0;
  $target_flag = 0;
  $indicator_count = 0;

  for ($i = 0; $i < count($data); $i++) {
    for ($j = 0; $j < count($data[$i]); $j++) {
      if (($i == 3) && ($j == 15)) {
        $overall_performance_rating = round($data[$i][$j] * 100);
      }
      elseif ((in_array($i, $asp_array)) && $j == 1) {
        if (!empty($data[$i][$j])) {
          $aspiration      = $data[$i][$j];
          $aspiration_name = explode(":", $aspiration);
          if ($aspiration_name[0] == $aspiration) {
            $aspiration_name = explode(".", $aspiration);
          }
          $aspiration_fr = $key_items[trim($aspiration)];
          if (empty($aspiration_fr)) {
            $aspiration_fr = $aspiration;
          }
          $aspiration_name_fr = explode(":", $aspiration_fr);
          if ($aspiration_name_fr[0] == $aspiration_fr) {
            $aspiration_name_fr = explode(".", $aspiration_fr);
          }
          $asp_priority_dashboard = (int) round($data[$i][13] * 100) . '%';
          $asp_priority_scores    = $data[$i][14];
          $asp_indexed_priority   = (int) round($data[$i][15] * 100) . '%';
        }
      }

      elseif ((in_array($i, $goal_array)) && $j == 1) {
        if (!empty($data[$i][$j])) {
          $goal      = $data[$i][$j];
          $goal_name = explode(":", $goal);
          $goal      = strtoupper($goal_name[0]) . ":" . $goal_name[1];
          $goal_fr   = $key_items[trim($goal)];
          if (empty($goal_fr)) {
            $goal_fr = $goal;
          }
          $goal_indexed_priority = (int) round($data[$i][15] * 100) . '%';
        }
      }

      elseif ((!in_array($i, $asp_array)) && (!in_array($i, $goal_array)) && ($i >= $start)) {
        switch ($j) {
          case 1:
            if (strlen($data[$i][$j]) != 0) {
              $priority = $data[$i][$j];
              $priority_fr = $key_items[trim($priority)];
              if (empty($priority_fr)) {
                $priority_fr = $priority;
              }
            }
            break;

          case 2:
            if (strlen($data[$i][$j]) != 0) {
              $p_weight = $data[$i][$j];
            }
            break;

          case 3:
            if (strlen($data[$i][$j]) != 0) {
              $target = $data[$i][$j];
              $target_fr = $key_items[trim($target)];
              if (empty($target_fr)) {
                $target_fr = $target;
              }
            }
            else {
              $target_flag = 1;
            }
            break;

          case 4:
            if (strlen($data[$i][$j]) != 0) {
              $t_weight = $data[$i][$j];
            }
            break;

          case 5:
            if (strlen($data[$i][$j]) != 0) {
              $indicator = $data[$i][$j];
            }
            break;

          case 6:
            $weight = $data[$i][$j];
            break;

          case 7:
            $indicator_value = $data[$i][$j];
            break;

          case 9:
            $indicator_performance = $data[$i][$j];
            break;

          case 12:
            if ($data[$i][$j] == "100%") {
              $performance_rating = $data[$i][$j];
            }
            else {
              $performance_rating = (int) round($data[$i][$j] * 100) . '%';
            }
            break;

          case 14:
            if (strlen($data[$i][$j]) != 0) {
              $priority_scores = $data[$i][$j];
            }
            break;

          case 15:
            if (strlen($data[$i][$j]) != 0) {
              $indexed_priority_dashboard = (int) round($data[$i][$j] * 100) . '%';
            }
            break;

          default:
            break;
        }
      }
    }

    if (($i >= $start) && ($i <= 100) && (!in_array($i, $asp_array)) && (!in_array($i, $goal_array))) {

      $result['name']                                                                                                       = $country;
      $result['region_name']                                                                                                = $region_name;
      $result['name_en']                                                                                                    = $country;
      $result['region_name_en']                                                                                             = $region_name;
      $result['download_xlsx_path']                                                                                         = $country_xlsx_path;
      $result['pdf_uri_path']                                                                                               = $pdf_uri_path;
      $result['overall_performance_rating']                                                                                 = $overall_performance_rating;
      $result[$country][$aspiration]['aspiration']                                                                          = $aspiration;
      $result[$country][$aspiration]['aspiration_title']                                                                    = ltrim($aspiration_name[1]);
      $result[$country][$aspiration]['asp_priority_dashboard']                                                              = $asp_priority_dashboard;
      $result[$country][$aspiration]['asp_priority_scores']                                                                 = $asp_priority_scores;
      $result[$country][$aspiration]['asp_indexed_priority']                                                                = $asp_indexed_priority;
      $result[$country][$aspiration][$goal]['goal']                                                                         = $goal;
      $result[$country][$aspiration][$goal]['goal_indexed_priority']                                                        = $goal_indexed_priority;
      $result[$country][$aspiration][$goal][$priority]['priority']                                                          = $priority;
      $result[$country][$aspiration][$goal][$priority]['indexed_priority_dashboard']                                        = $indexed_priority_dashboard;
      $result[$country][$aspiration][$goal][$priority]['p_weight']                                                          = $p_weight;
      $result[$country][$aspiration][$goal][$priority]['priority_scores']                                                   = $priority_scores;
      $result[$country][$aspiration][$goal][$priority]['target'][$target]['agenda_target']                                  = $target;
      $result[$country][$aspiration][$goal][$priority]['target'][$target]['t_weight']                                       = $t_weight;
      $result[$country][$aspiration][$goal][$priority]['target'][$target]['indicator'][$indicator]['indicator_name']        = $indicator;
      $result[$country][$aspiration][$goal][$priority]['target'][$target]['indicator'][$indicator]['weight']                = $weight;
      $result[$country][$aspiration][$goal][$priority]['target'][$target]['indicator'][$indicator]['indicator_value']       = $indicator_value;
      $result[$country][$aspiration][$goal][$priority]['target'][$target]['indicator'][$indicator]['indicator_performance'] = $indicator_performance;
      $result[$country][$aspiration][$goal][$priority]['target'][$target]['indicator'][$indicator]['performance_rating']    = $performance_rating;

      $result_fr['name']                                                                                                                      = $country_fr;
      $result_fr['region_name']                                                                                                               = $region_name_fr;
      $result_fr['name_en']                                                                                                                   = $country;
      $result_fr['region_name_en']                                                                                                            = $region_name;
      $result_fr['download_xlsx_path']                                                                                                        = $country_xlsx_path_fr;
      $result_fr['pdf_uri_path']                                                                                                              = $pdf_uri_path_fr;
      $result_fr['overall_performance_rating']                                                                                                = $overall_performance_rating;
      $result_fr[$country_fr][$aspiration_fr]['aspiration']                                                                                   = $aspiration_fr;
      $result_fr[$country_fr][$aspiration_fr]['aspiration_title']                                                                             = ltrim($aspiration_name_fr[1]);
      $result_fr[$country_fr][$aspiration_fr]['asp_priority_dashboard']                                                                       = $asp_priority_dashboard;
      $result_fr[$country_fr][$aspiration_fr]['asp_priority_scores']                                                                          = $asp_priority_scores;
      $result_fr[$country_fr][$aspiration_fr]['asp_indexed_priority']                                                                         = $asp_indexed_priority;
      $result_fr[$country_fr][$aspiration_fr][$goal_fr]['goal']                                                                               = $goal_fr;
      $result_fr[$country_fr][$aspiration_fr][$goal_fr]['goal_indexed_priority']                                                              = $goal_indexed_priority;
      $result_fr[$country_fr][$aspiration_fr][$goal_fr][$priority_fr]['priority']                                                             = $priority_fr;
      $result_fr[$country_fr][$aspiration_fr][$goal_fr][$priority_fr]['indexed_priority_dashboard']                                           = $indexed_priority_dashboard;
      $result_fr[$country_fr][$aspiration_fr][$goal_fr][$priority_fr]['p_weight']                                                             = $p_weight;
      $result_fr[$country_fr][$aspiration_fr][$goal_fr][$priority_fr]['priority_scores']                                                      = $priority_scores;
      $result_fr[$country_fr][$aspiration_fr][$goal_fr][$priority_fr]['target'][$target_fr]['agenda_target']                                  = $target_fr;
      $result_fr[$country_fr][$aspiration_fr][$goal_fr][$priority_fr]['target'][$target_fr]['t_weight']                                       = $t_weight;
      $result_fr[$country_fr][$aspiration_fr][$goal_fr][$priority_fr]['target'][$target_fr]['indicator'][$indicator]['indicator_name']        = $indicator;
      $result_fr[$country_fr][$aspiration_fr][$goal_fr][$priority_fr]['target'][$target_fr]['indicator'][$indicator]['weight']                = $weight;
      $result_fr[$country_fr][$aspiration_fr][$goal_fr][$priority_fr]['target'][$target_fr]['indicator'][$indicator]['indicator_value']       = $indicator_value;
      $result_fr[$country_fr][$aspiration_fr][$goal_fr][$priority_fr]['target'][$target_fr]['indicator'][$indicator]['indicator_performance'] = $indicator_performance;
      $result_fr[$country_fr][$aspiration_fr][$goal_fr][$priority_fr]['target'][$target_fr]['indicator'][$indicator]['performance_rating']    = $performance_rating;

      /* Data for the homepage */
      $home_goal['name']                                                                                          = $country;
      $home_goal['region_name']                                                                                   = $region_name;
      $home_goal[$country][$goal]['goal']                                                                         = $goal;
      $home_goal[$country][$goal]['goal_indexed_priority']                                                        = $goal_indexed_priority;

      $home_goal_fr['name']                                                                                       = $country_fr;
      $home_goal_fr['region_name']                                                                                = $region_name_fr;
      $home_goal_fr[$country_fr][$goal_fr]['goal']                                                                = $goal_fr;
      $home_goal_fr[$country_fr][$goal_fr]['goal_indexed_priority']                                               = $goal_indexed_priority;


      // dsm($result_fr);
      $agenda_2063[$_SESSION['incre']]['country'] = $country;
      $agenda_2063[$_SESSION['incre']]['country_en'] = $country;
      $agenda_2063[$_SESSION['incre']]['region_name'] = $region_name;
      $agenda_2063[$_SESSION['incre']]['aspiration'] = $aspiration;
      $agenda_2063[$_SESSION['incre']]['aspiration_title'] = ltrim($aspiration_name[1]);
      $agenda_2063[$_SESSION['incre']]['asp_priority_dashboard'] = $asp_priority_dashboard;
      $agenda_2063[$_SESSION['incre']]['asp_priority_scores'] = $asp_priority_scores;
      $agenda_2063[$_SESSION['incre']]['asp_indexed_priority'] = $asp_indexed_priority;
      $agenda_2063[$_SESSION['incre']]['goal'] = $goal;
      $agenda_2063[$_SESSION['incre']]['goal_indexed_priority'] = $goal_indexed_priority;
      $agenda_2063[$_SESSION['incre']]['priority'] = $priority;
      $agenda_2063[$_SESSION['incre']]['p_weight'] = $p_weight;
      $agenda_2063[$_SESSION['incre']]['target'] = $target;
      $agenda_2063[$_SESSION['incre']]['t_weight'] = $t_weight;
      $agenda_2063[$_SESSION['incre']]['indicator'] = $indicator;
      $agenda_2063[$_SESSION['incre']]['weight'] = $weight;
      $agenda_2063[$_SESSION['incre']]['indicator_value'] = $indicator_value;
      $agenda_2063[$_SESSION['incre']]['indicator_performance'] = $indicator_performance;
      $agenda_2063[$_SESSION['incre']]['performance_rating'] = $performance_rating;
      $agenda_2063[$_SESSION['incre']]['priority_scores'] = $priority_scores;
      $agenda_2063[$_SESSION['incre']]['indexed_priority_dashboard'] = $indexed_priority_dashboard;

      $agenda_2063_fr[$_SESSION['incre']]['country'] = $country_fr;
      $agenda_2063_fr[$_SESSION['incre']]['country_en'] = $country;
      $agenda_2063_fr[$_SESSION['incre']]['region_name'] = $region_name_fr;
      $agenda_2063_fr[$_SESSION['incre']]['aspiration'] = $aspiration_fr;
      $agenda_2063_fr[$_SESSION['incre']]['aspiration_title'] = ltrim($aspiration_name_fr[1]);
      $agenda_2063_fr[$_SESSION['incre']]['asp_priority_dashboard'] = $asp_priority_dashboard;
      $agenda_2063_fr[$_SESSION['incre']]['asp_priority_scores'] = $asp_priority_scores;
      $agenda_2063_fr[$_SESSION['incre']]['asp_indexed_priority'] = $asp_indexed_priority;
      $agenda_2063_fr[$_SESSION['incre']]['goal'] = $goal_fr;
      $agenda_2063_fr[$_SESSION['incre']]['goal_indexed_priority'] = $goal_indexed_priority;
      $agenda_2063_fr[$_SESSION['incre']]['priority'] = $priority_fr;
      $agenda_2063_fr[$_SESSION['incre']]['p_weight'] = $p_weight;
      $agenda_2063_fr[$_SESSION['incre']]['target'] = $target_fr;
      $agenda_2063_fr[$_SESSION['incre']]['t_weight'] = $t_weight;
      $agenda_2063_fr[$_SESSION['incre']]['indicator'] = $indicator;
      $agenda_2063_fr[$_SESSION['incre']]['weight'] = $weight;
      $agenda_2063_fr[$_SESSION['incre']]['indicator_value'] = $indicator_value;
      $agenda_2063_fr[$_SESSION['incre']]['indicator_performance'] = $indicator_performance;
      $agenda_2063_fr[$_SESSION['incre']]['performance_rating'] = $performance_rating;
      $agenda_2063_fr[$_SESSION['incre']]['priority_scores'] = $priority_scores;
      $agenda_2063_fr[$_SESSION['incre']]['indexed_priority_dashboard'] = $indexed_priority_dashboard;

      $country_code[$country_id]['country_id'] = $country_id;
      $country_code[$country_id]['country_name'] = $country;

      $country_code_fr[$country_id]['country_id'] = $country_id;
      $country_code_fr[$country_id]['country_name'] = $country_fr;

      $_SESSION['incre']++;

    }
  }
  $context['results'] = $result;
  $context['results']['count']++;
  $context['results']['country'] = $country;

  $_SESSION['countries']['data'][] = $result;
  $_SESSION['countries_fr']['data'][] = $result_fr;
  $_SESSION['agenda_2063']['data'][] = $agenda_2063;
  $_SESSION['agenda_2063_fr']['data'][] = $agenda_2063_fr;
  $_SESSION['region_data'][$region_name][] = $country;
  $_SESSION['region_data_fr'][$region_name_fr][] = $country_fr;  
  $_SESSION['country_code'][] = $country_code;
  $_SESSION['country_code_fr'][] = $country_code_fr;
  $_SESSION['home_goal']['data'][] = $home_goal;
  $_SESSION['home_goal_fr']['data'][] = $home_goal_fr;
  $_SESSION['current_country'] = $current_country;

}


  /**
 * Batch finished.
 */
public function agenda_dashboard_form_finished($success, $results, $operations) {
  if ($success) {
    \Drupal\agenda_template\Form\CustomTemplateForm::agenda_dashboard_form_file($_SESSION['countries'], $_SESSION['agenda_2063'], $_SESSION['home_goal'], $_SESSION['countries_fr'], $_SESSION['agenda_2063_fr'], $_SESSION['home_goal_fr'], $_SESSION['current_country']);
    \Drupal\agenda_template\Form\CustomTemplateForm::agenda_region_country_form_file($_SESSION['region_data'], $_SESSION['region_data_fr'], $_SESSION['country_code'], $_SESSION['country_code_fr']);
  }
  else {
    $message = t('Finished with an error.');
    \Drupal::messenger()->addMessage($message);
  }
   unset($_SESSION['current_node']);
}

/**
 * Function create jsom file.
 */
public function agenda_dashboard_form_file($agenda_sample, $agenda_2063,  $home_goal, $agenda_sample_fr, $agenda_2063_fr, $home_goal_fr, $current_country) {

  $path     = drupal_realpath('public://');
  $destination = $path."/agenda_dashboard_preview";
  if (!file_exists($destination)) {
    mkdir($destination, 777, TRUE);
  }

  $map_data = $agenda_sample;
  $fp_a     = fopen($path . '/agenda_dashboard_preview/agenda_sample_en-' .$current_country. '.json', 'w');
  $map_data = json_encode($map_data, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);
  $map_data = str_replace('\\', '', $map_data);
  $map_data = trim($map_data, '"');
  fwrite($fp_a, $map_data);
  fclose($fp_a);

  $map_data = $agenda_2063;
  $fp_a     = fopen($path . '/agenda_dashboard_preview/agenda_2063_en-' .$current_country. '.json', 'w');
  $map_data = json_encode($map_data, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);
  $map_data = str_replace('\\', '', $map_data);
  $map_data = trim($map_data, '"');
  fwrite($fp_a, $map_data);
  fclose($fp_a);

  $map_data = $agenda_sample_fr;
  $fp_a     = fopen($path . '/agenda_dashboard_preview/agenda_sample_fr-' .$current_country. '.json', 'w');
  $map_data = json_encode($map_data, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);
  $map_data = str_replace('\\', '', $map_data);
  $map_data = trim($map_data, '"');
  fwrite($fp_a, $map_data);
  fclose($fp_a);

  $map_data = $agenda_2063_fr;
  $fp_a     = fopen($path . '/agenda_dashboard_preview/agenda_2063_fr-' .$current_country. '.json', 'w');
  $map_data = json_encode($map_data, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);
  $map_data = str_replace('\\', '', $map_data);
  $map_data = trim($map_data, '"');
  fwrite($fp_a, $map_data);
  fclose($fp_a); 

  $map_data = $home_goal;
  $fp_a     = fopen($path . '/agenda_dashboard_preview/home_country_goal_en-' .$current_country. '.json', 'w');
  $map_data = json_encode($map_data, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);
  $map_data = str_replace('\\', '', $map_data);
  $map_data = trim($map_data, '"');
  fwrite($fp_a, $map_data);
  fclose($fp_a);

  $map_data = $home_goal_fr;
  $fp_a     = fopen($path . '/agenda_dashboard_preview/home_country_goal_fr-' .$current_country. '.json', 'w');
  $map_data = json_encode($map_data, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);
  $map_data = str_replace('\\', '', $map_data);
  $map_data = trim($map_data, '"');
  fwrite($fp_a, $map_data);
  fclose($fp_a);

  unset($_SESSION['countries']);
  unset($_SESSION['agenda_2063']);
  unset($_SESSION['home_goal']);
  unset($_SESSION['countries_fr']);
  unset($_SESSION['agenda_2063_fr']);
  unset($_SESSION['home_goal_fr']);

  \Drupal\agenda_template\Form\CustomTemplateForm::aspiration_json_form_creation($current_country);
  \Drupal\agenda_template\Form\CustomTemplateForm::aspiration_json_form_creation_french($current_country);

  }

  /**
 * Function to create json from main json.
 * https://nepad-newdev.assyst.in:1443/sites/default/files/agenda_dashboard_preview/aspiration_list_en.json.
 */
public function aspiration_json_form_creation($current_country) {

  $path = drupal_realpath('public://');
  $aspiration = [];
  $json = $path . '/agenda_dashboard_preview/agenda_2063_en-' .$current_country. '.json';
  $string = file_get_contents($json);
  $json_all = json_decode($string, TRUE);

  $aspiration_file = $path . '/agenda_dashboard_preview/aspiration_condinental_list_en.json';
  $string_json = file_get_contents($aspiration_file);
  $json_aspiration = json_decode($string_json, TRUE);
  $n = -1;
  if (($string_json != FALSE) && ($json_aspiration != NULL)) {
    foreach ($json_aspiration as $aspiration_item) {
      $aspiration_no = $aspiration_item['aspiration'];
      if (($string != FALSE) && ($json_all != NULL)) {
        for ($i = 0; $i < count($json_all['data']); $i++) {
          for ($j = 0; $j < count($json_all['data'][$i]); $j++) {
            if ($aspiration_no == $json_all['data'][$i][$j]['aspiration']) {
              $aspiration_text = $json_all['data'][$i][$j]['aspiration'];
              $aspiration_name = explode(":", $aspiration_text);
              if ($aspiration_name[0] == $aspiration_text) {
                $aspiration_name = explode(".", $aspiration_text);
              }
              $country = $json_all['data'][$i][$j]['country'];
              $aspiration['data'][$n]['label'] = $aspiration_text;
              $aspiration['data'][$n]['aspiration_title'] = ltrim($aspiration_name[1]);
              $aspiration['data'][$n]['cont_score_all'] = $aspiration_item['aspiration_dashboard_score'];
              $aspiration['data'][$n]['country'][$country]['country'] = $json_all['data'][$i][$j]['country'];
              $aspiration['data'][$n]['country'][$country]['country_en'] = $json_all['data'][$i][$j]['country_en'];
              $cont_score = substr_replace($json_all['data'][$i][$j]['asp_indexed_priority'], "", -1);
              $aspiration['data'][$n]['country'][$country]['cont_score'] = (int) $cont_score;
            }
          }
        }
      }
      $n++;
    }
    $map_data = $aspiration;
    $fp_a     = fopen($path . '/agenda_dashboard_preview/aspiration_list_en-' .$current_country. '.json', 'w');
    $map_data = json_encode($map_data, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);
    $map_data = str_replace('\\', '', $map_data);
    $map_data = trim($map_data, '"');
    fwrite($fp_a, $map_data);
    fclose($fp_a);
  }

  \Drupal\agenda_template\Form\CustomTemplateForm::goal_country_json_form_creation($current_country);
}

/**
 * Function to create goal json from main json.
 * https://nepad-newdev.assyst.in:1443/sites/default/files/agenda_dashboard_preview/goal_country_list_en.json.
 */
public function goal_country_json_form_creation($current_country) {

  $path = drupal_realpath('public://');
  $goal = [];
  $json = $path . '/agenda_dashboard_preview/agenda_2063_en-' .$current_country. '.json';
  $string = file_get_contents($json);
  $json_all = json_decode($string, TRUE);

  $goal_file = $path . '/agenda_dashboard_preview/goal_list_en.json';
  $string_json = file_get_contents($goal_file);
  $json_goal = json_decode($string_json, TRUE);
  $n = 0;
  if (($string_json != FALSE) && ($json_goal != NULL)) {
    foreach ($json_goal as $goal_item) {
      $goal_no = $goal_item['goal'];
      if (($string != FALSE) && ($json_all != NULL)) {
        for ($i = 0; $i < count($json_all['data']); $i++) {
          for ($j = 0; $j < count($json_all['data'][$i]); $j++) {
            if ($goal_no == $json_all['data'][$i][$j]['goal']) {
              $goal_text = $json_all['data'][$i][$j]['goal'];
              $goal_name = explode(":", $goal_text);
              if ($goal_name[0] == $goal_text) {
                $goal_name = explode(".", $goal_text);
              }
              $country = $json_all['data'][$i][$j]['country'];
              $goal['data'][$n]['label'] = $goal_text;
              $goal['data'][$n]['goal_title'] = ltrim($goal_name[1]);
              $goal['data'][$n]['country'][$country]['country'] = $json_all['data'][$i][$j]['country'];
              $cont_score = substr_replace($json_all['data'][$i][$j]['goal_indexed_priority'], "", -1);
              $goal['data'][$n]['country'][$country]['goal_country_score'] = (int) $cont_score;
              $goal['data'][$n]['country'][$country]['region'] = $json_all['data'][$i][$j]['region_name'];
            }
          }
        }
      }
      $n++;
    }
    $map_data = $goal;
    $fp_a     = fopen($path . '/agenda_dashboard_preview/goal_country_list_en-' .$current_country. '.json', 'w');
    $map_data = json_encode($map_data, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);
    $map_data = str_replace('\\', '', $map_data);
    $map_data = trim($map_data, '"');
    fwrite($fp_a, $map_data);
    fclose($fp_a);
  }

  \Drupal\agenda_template\Form\CustomTemplateForm::priority_area_json_form_creation($current_country);

}

/**
 * Function to create goal json from main json.
 * https://nepad-newdev.assyst.in:1443/sites/default/files/agenda_dashboard_preview/goal_list_en.json.
 */
public function priority_area_json_form_creation($current_country) {

  $path = drupal_realpath('public://');
  $priority = [];
  $json = $path . '/agenda_dashboard_preview/agenda_2063_en-' .$current_country. '.json';
  $string = file_get_contents($json);
  $json_all = json_decode($string, TRUE);

  $priority_file = $path . '/agenda_dashboard_preview/priority_list_en.json';
  $string_json = file_get_contents($priority_file);
  $json_priority = json_decode($string_json, TRUE);
  $n = 0;
  if (($string_json != FALSE) && ($json_priority != NULL)) {
    foreach ($json_priority as $priority_item) {
      $priority_no = $priority_item['priority_name'];
      if (($string != FALSE) && ($json_all != NULL)) {
        for ($i = 0; $i < count($json_all['data']); $i++) {
          for ($j = 0; $j < count($json_all['data'][$i]); $j++) {
            if ($priority_no == $json_all['data'][$i][$j]['priority']) {
              $priority_text = $json_all['data'][$i][$j]['priority'];
              $priority_name = explode(".", $priority_text);
              if (empty($priority_name[1])) {
                $priority_name[1] = $priority_name[0];
              }
              $country = $json_all['data'][$i][$j]['country'];
              $priority['data'][$n]['label'] = $priority_text;
              $priority['data'][$n]['priority_title'] = ltrim($priority_name[1]);
              $priority['data'][$n]['aspiration'] = $json_all['data'][$i][$j]['aspiration'];
              $priority['data'][$n]['goal'] = $json_all['data'][$i][$j]['goal'];
              $priority['data'][$n]['country'][$country]['country'] = $json_all['data'][$i][$j]['country'];
              $cont_score = substr_replace($json_all['data'][$i][$j]['indexed_priority_dashboard'], "", -1);
              $priority['data'][$n]['country'][$country]['priority_country_score'] = (int) $cont_score;
            }
          }
        }
      }
      $n++;
    }
    $map_data = $priority;
    $fp_a     = fopen($path . '/agenda_dashboard_preview/priority_country_list_en-' .$current_country. '.json', 'w');
    $map_data = json_encode($map_data, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);
    $map_data = str_replace('\\', '', $map_data);
    $map_data = trim($map_data, '"');
    fwrite($fp_a, $map_data);
    fclose($fp_a);
  }

}

/**
 * Function to create json from main json.
 * https://nepad-newdev.assyst.in:1443/sites/default/files/agenda_dashboard_preview/aspiration_list_en.json.
 */
public function aspiration_json_form_creation_french($current_country) {

  $path = drupal_realpath('public://');
  $aspiration = [];
  $json = $path . '/agenda_dashboard_preview/agenda_2063_fr-' .$current_country. '.json';
  $string = file_get_contents($json);
  $json_all = json_decode($string, TRUE);

  $aspiration_file = $path . '/agenda_dashboard_preview/aspiration_condinental_list_fr.json';
  $string_json = file_get_contents($aspiration_file);
  $json_aspiration = json_decode($string_json, TRUE);
  $n = -1;
  if (($string_json != FALSE) && ($json_aspiration != NULL)) {
    foreach ($json_aspiration as $aspiration_item) {
      $aspiration_no = $aspiration_item['aspiration'];
      if (($string != FALSE) && ($json_all != NULL)) {
        for ($i = 0; $i < count($json_all['data']); $i++) {
          for ($j = 0; $j < count($json_all['data'][$i]); $j++) {
            if ($aspiration_no == $json_all['data'][$i][$j]['aspiration']) {
              $aspiration_text = $json_all['data'][$i][$j]['aspiration'];
              $aspiration_name = explode(":", $aspiration_text);
              if ($aspiration_name[0] == $aspiration_text) {
                $aspiration_name = explode(".", $aspiration_text);
              }
              $country = $json_all['data'][$i][$j]['country'];
              $aspiration['data'][$n]['label'] = $aspiration_text;
              $aspiration['data'][$n]['aspiration_title'] = ltrim($aspiration_name[1]);
              $aspiration['data'][$n]['cont_score_all'] = $aspiration_item['aspiration_dashboard_score'];
              $aspiration['data'][$n]['country'][$country]['country'] = $json_all['data'][$i][$j]['country'];
              $aspiration['data'][$n]['country'][$country]['country_en'] = $json_all['data'][$i][$j]['country_en'];
              $cont_score = substr_replace($json_all['data'][$i][$j]['asp_indexed_priority'], "", -1);
              $aspiration['data'][$n]['country'][$country]['cont_score'] = (int) $cont_score;
            }
          }
        }
      }
      $n++;
    }
    $map_data = $aspiration;
    $fp_a     = fopen($path . '/agenda_dashboard_preview/aspiration_list_fr-' .$current_country. '.json', 'w');
    $map_data = json_encode($map_data, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);
    $map_data = str_replace('\\', '', $map_data);
    $map_data = trim($map_data, '"');
    fwrite($fp_a, $map_data);
    fclose($fp_a);
  }

  \Drupal\agenda_template\Form\CustomTemplateForm::goal_country_json_form_creation_french($current_country);
}

/**
 * Function to create goal json from main json.
 * https://nepad-newdev.assyst.in:1443/sites/default/files/agenda_dashboard_preview/goal_country_list_fr.json.
 */
public function goal_country_json_form_creation_french($current_country) {

  $path = drupal_realpath('public://');
  $goal = [];
  $json = $path . '/agenda_dashboard_preview/agenda_2063_fr-' .$current_country. '.json';
  $string = file_get_contents($json);
  $json_all = json_decode($string, TRUE);

  $goal_file = $path . '/agenda_dashboard_preview/goal_list_fr.json';
  $string_json = file_get_contents($goal_file);
  $json_goal = json_decode($string_json, TRUE);
  $n = 0;
  if (($string_json != FALSE) && ($json_goal != NULL)) {
    foreach ($json_goal as $goal_item) {
      $goal_no = $goal_item['goal'];
      if (($string != FALSE) && ($json_all != NULL)) {
        for ($i = 0; $i < count($json_all['data']); $i++) {
          for ($j = 0; $j < count($json_all['data'][$i]); $j++) {
            if ($goal_no == $json_all['data'][$i][$j]['goal']) {
              $goal_text = $json_all['data'][$i][$j]['goal'];
              $goal_name = explode(":", $goal_text);
              if ($goal_name[0] == $goal_text) {
                $goal_name = explode(".", $goal_text);
              }
              $country = $json_all['data'][$i][$j]['country'];
              $goal['data'][$n]['label'] = $goal_text;
              $goal['data'][$n]['goal_title'] = ltrim($goal_name[1]);
              $goal['data'][$n]['country'][$country]['country'] = $json_all['data'][$i][$j]['country'];
              $cont_score = substr_replace($json_all['data'][$i][$j]['goal_indexed_priority'], "", -1);
              $goal['data'][$n]['country'][$country]['goal_country_score'] = (int) $cont_score;
              $goal['data'][$n]['country'][$country]['region'] = $json_all['data'][$i][$j]['region_name'];
            }
          }
        }
      }
      $n++;
    }
    $map_data = $goal;
    $fp_a     = fopen($path . '/agenda_dashboard_preview/goal_country_list_fr-' .$current_country. '.json', 'w');
    $map_data = json_encode($map_data, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);
    $map_data = str_replace('\\', '', $map_data);
    $map_data = trim($map_data, '"');
    fwrite($fp_a, $map_data);
    fclose($fp_a);
  }
  \Drupal\agenda_template\Form\CustomTemplateForm::priority_area_json_form_creation_french($current_country);

}

/**
 * Function to create goal json from main json.
 * https://nepad-newdev.assyst.in:1443/sites/default/files/agenda_dashboard_preview/goal_list_en.json.
 */
public function priority_area_json_form_creation_french($current_country) {

  $path = drupal_realpath('public://');
  $priority = [];
  $json = $path . '/agenda_dashboard_preview/agenda_2063_fr-' .$current_country. '.json';
  $string = file_get_contents($json);
  $json_all = json_decode($string, TRUE);

  $priority_file = $path . '/agenda_dashboard_preview/priority_list_fr.json';
  $string_json = file_get_contents($priority_file);
  $json_priority = json_decode($string_json, TRUE);
  $n = 0;
  if (($string_json != FALSE) && ($json_priority != NULL)) {
    foreach ($json_priority as $priority_item) {
      $priority_no = $priority_item['priority_name'];
      if (($string != FALSE) && ($json_all != NULL)) {
        for ($i = 0; $i < count($json_all['data']); $i++) {
          for ($j = 0; $j < count($json_all['data'][$i]); $j++) {
            if ($priority_no == $json_all['data'][$i][$j]['priority']) {
              $priority_text = $json_all['data'][$i][$j]['priority'];
              $priority_name = explode(".", $priority_text);
              if (empty($priority_name[1])) {
                $priority_name[1] = $priority_name[0];
              }
              $country = $json_all['data'][$i][$j]['country'];
              $priority['data'][$n]['label'] = $priority_text;
              $priority['data'][$n]['priority_title'] = ltrim($priority_name[1]);
              $priority['data'][$n]['aspiration'] = $json_all['data'][$i][$j]['aspiration'];
              $priority['data'][$n]['goal'] = $json_all['data'][$i][$j]['goal'];
              $priority['data'][$n]['country'][$country]['country'] = $json_all['data'][$i][$j]['country'];
              $cont_score = substr_replace($json_all['data'][$i][$j]['indexed_priority_dashboard'], "", -1);
              $priority['data'][$n]['country'][$country]['priority_country_score'] = (int) $cont_score;
            }
          }
        }
      }
      $n++;
    }
    $map_data = $priority;
    $fp_a     = fopen($path . '/agenda_dashboard_preview/priority_country_list_fr-' .$current_country. '.json', 'w');
    $map_data = json_encode($map_data, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);
    $map_data = str_replace('\\', '', $map_data);
    $map_data = trim($map_data, '"');
    fwrite($fp_a, $map_data);
    fclose($fp_a);

    unset($_SESSION['current_country']);
  }

}

  /**
 * Create json file.
 */
public function agenda_region_country_form_file($region_data, $region_data_fr ,$country_code, $country_code_fr) {
  $path = drupal_realpath('public://');

  $map_data = $region_data;
  $fp_a     = fopen($path . '/agenda_dashboard_preview/region/region_countries_en.json', 'w');
  $map_data = json_encode($map_data, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);
  $map_data = str_replace('\\', '', $map_data);
  $map_data = trim($map_data, '"');
  fwrite($fp_a, $map_data);
  fclose($fp_a);

  $map_data = $region_data_fr;
  $fp_a     = fopen($path . '/agenda_dashboard_preview/region/region_countries_fr.json', 'w');
  $map_data = json_encode($map_data, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);
  $map_data = str_replace('\\', '', $map_data);
  $map_data = trim($map_data, '"');
  fwrite($fp_a, $map_data);
  fclose($fp_a);

  $map_data = $country_code;
  $fp_a     = fopen($path . '/agenda_dashboard_preview/country_code_en.json', 'w');
  $map_data = json_encode($map_data, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);
  $map_data = str_replace('\\', '', $map_data);
  $map_data = trim($map_data, '"');
  fwrite($fp_a, $map_data);  
  fclose($fp_a);

  $map_data = $country_code_fr;
  $fp_a     = fopen($path . '/agenda_dashboard_preview/country_code_fr.json', 'w');
  $map_data = json_encode($map_data, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);
  $map_data = str_replace('\\', '', $map_data);
  $map_data = trim($map_data, '"');
  fwrite($fp_a, $map_data);
  fclose($fp_a);

  unset($_SESSION['region_data']);
  unset($_SESSION['region_data_fr']);  
  unset($_SESSION['country_code']);
  unset($_SESSION['country_code_fr']);
}

/**************************************************************** Visulise end *****************************************************/

  /**
   * publish json creation
   */
  public function agenda_dashboard_publish_combine($submit_year) {

    $cont_id = 116;
    $cont_term = Term::load($cont_id);
    $cont_code = $cont_term->get('field_short_title')->value;
    $country_cont_count = agenda_template_condinental_countries_count($cont_id);
    $cont_array = ['cont_id'=>$cont_id, 'cont_code'=>$cont_code, 'country_cont_count'=>$country_cont_count];

    $query_id = \Drupal::database()->select('indicator_data_main', 'ind'); 
    $query_id->fields('ind', ['country_id']);
    $query_id->fields('ind', ['year']);
    // $query_id->condition('ind.country_id', ['155','123','141','165','168'], IN); 
     // $query_id->condition('ind.country_id', ['168'], IN); 
     // $query_id->condition('ind.country_id', ['155','123','168'], IN); 
     // $query_id->condition('ind.year', ['2019','2020'], IN); 
    // $query_id->condition('ind.year', ['2019','2020'], IN); 
    $query_id->distinct();
    $results = $query_id->execute();
    $key_items = agenda_template_french_key_items();
    $aggregate_type = $this->agenda_template_aggregate_method();
    foreach ($results as $key => $country_value) {
      $country_id = $country_value->country_id;
      $current_year = $country_value->year;
      $country_set[] = $country_id;
      $query_max = \Drupal::database()->select('indicator_data_main');
      $query_max->addExpression('MAX(version)');
      $query_max->condition('country_id', $country_id, "=");
      $query_max->condition('year', $current_year, "=");
      $max_version = $query_max->execute()->fetchField();

      $query_data = \Drupal::database()->select('indicator_data_main', 'ind'); 
      $query_data->fields('ind', ['indicator_id','current_value','base_value','date_entry','data_source','publish_year','remarks','year','country_id','version']);
      $query_data->condition('ind.country_id', $country_id, "=");
      $query_data->condition('ind.year', $current_year, "=");
      $query_data->condition('ind.version', $max_version, "=");
      $xlsx_results = $query_data->execute();

      $row = $this->agenda_dashboard_publish_xlxs_engine($xlsx_results, $current_year, $country_id);
      
      $operations[] = ['\Drupal\agenda_template\Form\CustomTemplateForm::agenda_dashboard_publish_data_json', [$row, $country_id, $current_year, $submit_year, $key_items, $cont_array, $aggregate_type]];
    }

    $batch_year_country = [
    'title' => t('Exporting the Agenda Dashboard All Data'),
    'operations' => $operations,
    'finished' => '\Drupal\agenda_template\Form\CustomTemplateForm::agenda_dashboard_publish_finished',
    'error_message' => t('The Creation encountered an error.'),
    'progress_message' => t('creating country profile @current of @total profiles. Please wait.'),
  ];
  batch_set($batch_year_country);

  }


  // /**
  //  * Xlxs Expected value calculations.
  //  */
  // public function agenda_dashboard_expected_value_engine($target_id, $base_value, $current_year) {

  //   $target_term = Term::load($target_id);
  //   // $current_year = 2023;
  //   $target = $target_term->get('name')->getString();
  //   $expected_value = $target_term->get('field_expected_value')->value;
  //   $value_unit = $target_term->get('field_value_unit')->value;
  //   $increase = $target_term->get('field_increase_decrease')->value;
  //   $years = $current_year - 2013;
  //   if(!empty($expected_value) && !empty($value_unit) && !empty($increase)){
  //     $expected_increase = (($base_value*($expected_value/100))*($years/10));
  //     $expected_increase_2023 = (($base_value*($expected_value/100))*(10/10));
  //     if($increase == 'incre'){
  //       $performance_rating = $base_value + $expected_increase;
  //       $performance_rating_2023 = $base_value + $expected_increase_2023;
  //     }
  //     elseif($increase == 'decre'){
  //       $performance_rating = $base_value - $expected_increase;
  //       $performance_rating_2023 = $base_value - $expected_increase_2023;
  //     }
  //   }
  //   $rate = ['expected_increase'=>$expected_increase, 'performance_rating'=>$performance_rating, 'performance_rating_2023'=>$performance_rating_2023];
  //   return $rate;
 
  // }


  // /**
  //  * Xlxs engine for generate data.
  //  */
  // public function agenda_dashboard_publish_xlxs_engine($xlsx_results, $current_year, $country_id) {

  //   $module = drupal_get_path('module', 'agenda_template');
  //   $path = drupal_realpath('public://');
  //   $file_uri = $module . '/data/country/country_engine.xlsx'; 

  //   if($phpExcel = \PHPExcel_IOFactory::createReader('Excel2007')) {
  //     $phpExcel = $phpExcel->load($file_uri);
  //     $sheet = $phpExcel->getActiveSheet();
  //     $data_file = $sheet->rangeToArray('A1:S117');
  //   }
  //   $country_term = Term::load($country_id);
  //   $country = $country_term->get('name')->getString();
  //   foreach ($xlsx_results as $key => $result_indicator) {
  //     $indicator_term = Term::load($result_indicator->indicator_id);
  //     $indicator = $indicator_term->get('name')->getString();
  //     $target_id = $indicator_term->get('field_targets')->target_id;
  //     for ($i = 0; $i < count($data_file); $i++) {
  //       if(trim($indicator) == trim($data_file[$i][5])){
  //         $indicator_cell = "H" . ($i+1); 
  //         $base_cell = "I" . ($i+1);  
  //         $expected_cell = "K" . ($i+1);  
  //         $performance_cell = "L" . ($i+1);  
  //         $increase_2023_cell = "S" . ($i+1);  
  //         $indicator_value = $result_indicator->current_value;
  //         $base_value = $result_indicator->base_value;       
  //         $rate = $this->agenda_dashboard_expected_value_engine($target_id, $base_value, $current_year);
  //         $expected_increase = $rate['expected_increase'];
  //         $performance_rating = $rate['performance_rating'];
  //         $performance_rating_2023 = $rate['performance_rating_2023'];
               
  //         $phpExcel->getActiveSheet()->setCellValue($indicator_cell, $indicator_value);
  //         $phpExcel->getActiveSheet()->setCellValue($base_cell, $base_value);
  //         $phpExcel->getActiveSheet()->setCellValue($expected_cell, $expected_increase);        
  //         $phpExcel->getActiveSheet()->setCellValue($performance_cell, $performance_rating);        
  //         $phpExcel->getActiveSheet()->setCellValue($increase_2023_cell, $performance_rating_2023);        
  //       }
  //     }  
  //   } 
  
  //   $save_file_name =  'Agenda_Dashboard_' . $country . '_' . $current_year . '.xlsx';
  //   $file_uri_save = $path . '/agenda_dashboard/xlsx_upload/'. $save_file_name;
  //   $writer = \PHPExcel_IOFactory::createWriter($phpExcel, "Excel2007");
  //   $writer->setPreCalculateFormulas(true);
  //   $writer->save($file_uri_save); 

  //   if ($phpExcel = \PHPExcel_IOFactory::createReader('Excel2007')) {
  //     $phpExcel = $phpExcel->load($file_uri_save); 
  //     $sheet = $phpExcel->getActiveSheet();
  //     $maxCell = $sheet->getHighestRowAndColumn();
  //     $sheetData = $sheet->rangeToArray('A1:S117');
  //   }
  //   for ($i = 0; $i < count($sheetData); $i++) {
  //     $check_N = "N" . ($i+1);
  //     $check_value_N = $phpExcel->getActiveSheet()->getCell($check_N)->getCalculatedValue();
  //     if($check_value_N == NULL ||  $check_value_N == 0){
  //        $phpExcel->getActiveSheet()->setCellValue($check_N, 0.01);  
  //     }
  //     $check_M = "M" . ($i+1);
  //     $check_value_M = $phpExcel->getActiveSheet()->getCell($check_M)->getCalculatedValue();
  //     if($check_value_M == NULL ||  $check_value_M == 0){
  //        $phpExcel->getActiveSheet()->setCellValue($check_M, 0.01);  
  //     }
  //     $base_col = "I" . ($i+1);
  //     $base_value = $phpExcel->getActiveSheet()->getCell($base_col)->getCalculatedValue();
  //     if($base_value == NULL ||  $base_value == 0){
  //       $phpExcel->getActiveSheet()->setCellValue($base_col, 0.01);
  //     }
  //   }
  //   $sheetData = $sheet->rangeToArray('A1:S117');
  //   return $sheetData;

  // }


  /**
   * Xlxs Expected value calculations.
   */
  public function agenda_dashboard_expected_value_engine($target_id, $base_value, $current_year, $check_exp_value, $check_mode_value) {
    
    $years = $current_year - 2013;
    if($check_mode_value == 'no_year'){
      $expected_increase = $check_exp_value;
      $expected_increase_2023 = $check_exp_value;
    }
    else if($check_mode_value == 'divide_seven'){
      $expected_increase = $check_exp_value*($years/7);
      $expected_increase_2023 = $check_exp_value*(10/7);
    }
    else{
      $expected_increase = $check_exp_value*($years/10);
      $expected_increase_2023 = $check_exp_value*(10/10);
    }
    $target_term = Term::load($target_id);
    $increase = $target_term->get('field_increase_decrease')->value;

    if($increase == 'incre'){
      $performance_rating_2023 = $base_value + $expected_increase_2023;
    }
    elseif($increase == 'decre'){
      $performance_rating_2023 = $base_value - $expected_increase_2023;
    }

    $rate = ['expected_increase'=>$expected_increase, 'performance_rating_2023'=>$performance_rating_2023];
    return $rate;
 
  }


  /**
   * Xlxs engine for generate data.
   */
  public function agenda_dashboard_publish_xlxs_engine($xlsx_results, $current_year, $country_id) {

    $module = drupal_get_path('module', 'agenda_template');
    $path = drupal_realpath('public://');
    $file_uri = $module . '/data/country/country_engine.xlsx'; 

    if($phpExcel = \PHPExcel_IOFactory::createReader('Excel2007')) {
      $phpExcel = $phpExcel->load($file_uri);
      $sheet = $phpExcel->getActiveSheet();
      $data_file = $sheet->rangeToArray('A1:U117');
    }
    \PHPExcel_Calculation::getInstance($phpExcel)->disableCalculationCache();
    \PHPExcel_Calculation::getInstance($phpExcel)->clearCalculationCache();
    $country_term = Term::load($country_id);
    $country = $country_term->get('name')->getString();
    foreach ($xlsx_results as $key => $result_indicator) {
      $indicator_term = Term::load($result_indicator->indicator_id);
      $indicator = $indicator_term->get('name')->getString();
      $target_id = $indicator_term->get('field_targets')->target_id;
      for ($i = 0; $i < count($data_file); $i++) {
        if(trim($indicator) == trim($data_file[$i][5])){
          $indicator_cell = "H" . ($i+1); 
          $base_cell = "I" . ($i+1);  
          $expected_cell = "K" . ($i+1);  
          $performance_cell = "L" . ($i+1);  
          $increase_2023_cell = "S" . ($i+1);  
          $indicator_value = $result_indicator->current_value;
          $base_value = $result_indicator->base_value;       

          $phpExcel->getActiveSheet()->setCellValue($indicator_cell, $indicator_value);
          $phpExcel->getActiveSheet()->setCellValue($base_cell, $base_value);
          $check_exp = "T" . ($i+1);
          $check_mode = "U" . ($i+1);
          $check_mode_value = $phpExcel->getActiveSheet()->getCell($check_mode)->getCalculatedValue();
          $check_exp_value = $phpExcel->getActiveSheet()->getCell($check_exp)->getCalculatedValue();
          $rate = $this->agenda_dashboard_expected_value_engine($target_id, $base_value, $current_year, $check_exp_value, $check_mode_value);
          $expected_increase = $rate['expected_increase'];
          $performance_rating_2023 = $rate['performance_rating_2023'];
          $expected_cell = "K" . ($i+1);  
          $increase_2023_cell = "S" . ($i+1); 
          $phpExcel->getActiveSheet()->setCellValue($expected_cell, $expected_increase);           
          $phpExcel->getActiveSheet()->setCellValue($increase_2023_cell, $performance_rating_2023);    
    
        }
      }  
    } 
      #Goal 11    
    $check_value_M_65 = (float)$sheet->getCell("M65")->getCalculatedValue();
    if($check_value_M_65 == 100){ 
      $check_value_M_65 = $check_value_M_65 / 100; 
    }
    $check_value_M_74 = (float)$sheet->getCell("M74")->getCalculatedValue();
    $check_value_M_75 = (float)$sheet->getCell("M75")->getCalculatedValue();
    $check_value_M_76 = (float)$sheet->getCell("M76")->getCalculatedValue();
    
    $check_value_M_77 = (float)$sheet->getCell("M77")->getCalculatedValue();
    if($check_value_M_77 == 100){ 
      $check_value_M_77 = $check_value_M_77 / 100; 
    }
    
    $check_value_M_78 = (float)$sheet->getCell("M78")->getCalculatedValue();
    if($check_value_M_78 == 100){ 
      $check_value_M_78 = $check_value_M_78 / 100; 
    }
    $check_value_M_90 = (float)$sheet->getCell("M90")->getCalculatedValue();
    if($check_value_M_90 == 100){ 
      $check_value_M_90 = $check_value_M_90 / 100; 
    }
    $check_value_M_79 = (float)$sheet->getCell("M79")->getCalculatedValue();
    $check_value_M_84 = (float)$sheet->getCell("M84")->getCalculatedValue();
    $check_value_M_86 = (float)$sheet->getCell("M86")->getCalculatedValue();
    $check_value_M_89 = (float)$sheet->getCell("M89")->getCalculatedValue();
    $sheet->setCellValue("M65",$check_value_M_65); 
    $sheet->setCellValue("M74",$check_value_M_74); 
    $sheet->setCellValue("M75",$check_value_M_75); 
    $sheet->setCellValue("M76",$check_value_M_76); 
    $sheet->setCellValue("M77",$check_value_M_77); 
    $sheet->setCellValue("M78",$check_value_M_78); 
    $sheet->setCellValue("M79",$check_value_M_79); 
    $sheet->setCellValue("M84",$check_value_M_84); 
    $sheet->setCellValue("M86",$check_value_M_86); 
    $sheet->setCellValue("M89",$check_value_M_89); 
    $sheet->setCellValue("M90",$check_value_M_90);

    #Goal 19
    $check_value_M_109 = (float)$sheet->getCell("M109")->getCalculatedValue();    
    $check_value_M_110 = (float)$sheet->getCell("M110")->getCalculatedValue();
    $check_value_M_111 = (float)$sheet->getCell("M111")->getCalculatedValue();     

    if($check_value_M_109 == 100){ 
      $check_value_M_109 = $check_value_M_109 / 100; 
    }
    if($check_value_M_111 == 100){ 
      $check_value_M_111 = $check_value_M_111 / 100; 
    } 
    $sheet->setCellValue("M109",$check_value_M_109); 
    $sheet->setCellValue("M110",$check_value_M_110); 
    $sheet->setCellValue("M111",$check_value_M_111); 
    
    $save_file_name =  'Agenda_Dashboard_' . $country . '_' . $current_year . '.xlsx';
    $file_uri_save = $path . '/agenda_dashboard/xlsx_upload/'. $save_file_name;
    $writer = \PHPExcel_IOFactory::createWriter($phpExcel, "Excel2007");
    $writer->setPreCalculateFormulas(true);
    $writer->save($file_uri_save); 

    if($phpExcel = \PHPExcel_IOFactory::createReader('Excel2007')) {
      $phpExcel = $phpExcel->load($file_uri_save); 
      $sheet = $phpExcel->getActiveSheet();
      $maxCell = $sheet->getHighestRowAndColumn();
      $sheetData = $sheet->rangeToArray('A1:U117');
    }
    for ($i = 0; $i < count($sheetData); $i++) {
      // $check_N = "N" . ($i+1);
      // $check_value_N = $phpExcel->getActiveSheet()->getCell($check_N)->getCalculatedValue();
      // if($check_value_N == NULL ||  $check_value_N == 0){
      //    $phpExcel->getActiveSheet()->setCellValue($check_N, 0.01);  
      // }
      // $check_M = "M" . ($i+1);
      // $check_value_M = $phpExcel->getActiveSheet()->getCell($check_M)->getCalculatedValue();
      // if($check_value_M == NULL ||  $check_value_M == 0){
      //    $phpExcel->getActiveSheet()->setCellValue($check_M, 0.01);  
      // }
      $base_col = "I" . ($i+1);
      $base_value = $phpExcel->getActiveSheet()->getCell($base_col)->getCalculatedValue();
      if($base_value == NULL ||  $base_value == 0){
        $phpExcel->getActiveSheet()->setCellValue($base_col, 0.01);
      }
    }
    $sheetData = $sheet->rangeToArray('A1:U117');

    return $sheetData;

  }

/**
 * Function to get French_translation.
 */
public function agenda_template_aggregate_method() {

  $path = drupal_realpath('public://');
  $json = $path . '/agenda_dashboard_year/aggregate_data_key.json';
  $string = file_get_contents($json);
  $aggregate_type = json_decode($string, TRUE);
  return $aggregate_type;
}


/**
 * Function to create json data from xls.
 */
public function agenda_dashboard_publish_data_json($row, $country_id, $current_year, $submit_year, $key_items, $cont_array, $aggregate_type, &$context) {

  $_SESSION['incre_pub'] = 0;
  $country_check = [];
  $country_term = Term::load($country_id);
  $country_code = 'cn' . $country_id;
  $country_short_code = $country_term->get('field_country_key')->value;
  $country = $country_term->get('name')->getString();

  $current_year = (int)$current_year;

  $cont_id = $cont_array['cont_id'];
  $cont_code = $cont_array['cont_code'];
  $country_cont_count = $cont_array['country_cont_count'];

  $region_array = agenda_template_load_regions($country_id);
  $region_short_code = $region_array['region_code'];
  $region_id = $region_array['region_id'];
  $region_code = 'rg' . $region_id;
  $region_name = $region_array['region_name'];

  $country_region_count = agenda_template_region_countries_count($region_id);
  $rec_array = agenda_template_load_recs($country_id, $cont_id);

  $data       = $row;
  $result     = $aspiration_list = [];
  $asp_array  = ['8', '54', '71', '81', '90', '93', '106'];
  $goal_array = ['9', '21', '26', '36', '41', '47', '50', '55', '59', '63', '72', '79', '82', '84', '87', '91', '94', '100', '107', '111'];

  $start = 10;
  $k = $n = 0;
  $target_flag = 0;
  $indicator_count = 0;

  for ($i = 0; $i < count($data); $i++) {
    for ($j = 0; $j < count($data[$i]); $j++) {
      if (($i == 3) && ($j == 15)) {
        $overall_performance_rating = (int) $data[$i][$j];    
        if($current_year == $submit_year){
          $overall_region_avg = $overall_performance_rating/$country_region_count;
          $context['results']['pub_region_aggregate'][$current_year][$region_id]['overall_performance_rating']['dashboard_performance'] += $overall_region_avg; 
          foreach ($rec_array as $key => $rec_result) { 
            $rec_id = $rec_result['rec_id'];
            $country_rec_count = agenda_template_rec_countries_count($rec_id);
            $overall_rec_avg = $overall_performance_rating/$country_rec_count;
            $context['results']['pub_rec_aggregate'][$current_year][$rec_id]['overall_performance_rating']['dashboard_performance'] += $overall_rec_avg;
          }
          $overall_cont_avg = $overall_performance_rating/$country_cont_count;
          $context['results']['pub_cont_aggregate'][$current_year][$cont_id]['overall_performance_rating']['dashboard_performance'] += $overall_cont_avg;
        }
      }
      elseif ((in_array($i, $asp_array)) && $j == 1) {
        if (!empty($data[$i][$j])) {
          $aspiration      = $data[$i][$j];
          $asp_code = 'as'. $i;
          $asp_priority_dashboard = $data[$i][13];
          $asp_priority_scores    = $data[$i][14];
          $asp_indexed_priority   = $data[$i][15];
          if($current_year == $submit_year){
            $asp_region_avg = $asp_indexed_priority/$country_region_count;
            $context['results']['pub_region_aggregate'][$current_year][$region_id][$aspiration]['dashboard_performance'] += $asp_region_avg;
            foreach ($rec_array as $key => $rec_result) { 
              $rec_id = $rec_result['rec_id'];
              $country_rec_count = agenda_template_rec_countries_count($rec_id);
              $asp_rec_avg = $asp_indexed_priority/$country_rec_count;
              $context['results']['pub_rec_aggregate'][$current_year][$rec_id][$aspiration]['dashboard_performance'] += $asp_rec_avg;
            }
            $asp_cont_avg = $asp_indexed_priority/$country_cont_count;
            $context['results']['pub_cont_aggregate'][$current_year][$cont_id][$aspiration]['dashboard_performance'] += $asp_cont_avg;
          } 
        }
      }

      elseif ((in_array($i, $goal_array)) && $j == 1) {
        if (!empty($data[$i][$j])) {
          $goal      = $data[$i][$j];
          $goal_code = 'gl'. $i;
          $goal_indexed_priority = $data[$i][15];
          if($current_year == $submit_year){
            $goal_region_avg = $goal_indexed_priority/$country_region_count;
            $context['results']['pub_region_aggregate'][$current_year][$region_id][$goal]['dashboard_performance'] += $goal_region_avg;
            foreach ($rec_array as $key => $rec_result) { 
              $rec_id = $rec_result['rec_id'];
              $country_rec_count = agenda_template_rec_countries_count($rec_id);
              $goal_rec_avg = $goal_indexed_priority/$country_rec_count;
              $context['results']['pub_rec_aggregate'][$current_year][$rec_id][$goal]['dashboard_performance'] += $goal_rec_avg;
            }
            $goal_cont_avg = $goal_indexed_priority/$country_cont_count;
            $context['results']['pub_cont_aggregate'][$current_year][$cont_id][$goal]['dashboard_performance'] += $goal_cont_avg;
          }  
        }
      }

      elseif ((!in_array($i, $asp_array)) && (!in_array($i, $goal_array)) && ($i >= $start)) {
        switch ($j) {
          case 1:
            if (strlen($data[$i][$j]) != 0) {
              $priority = $data[$i][$j];
              $prt_code = 'pr'. $i;
            }
            break;

          case 2:
            if (strlen($data[$i][$j]) != 0) {
              $p_weight = $data[$i][$j];
            }
            break;

          case 3:
            if (strlen($data[$i][$j]) != 0) {
              $target = $data[$i][$j];
              $tgt_code = 'tr'. $i;
              $target_fr = $key_items[trim($target)];
              if (empty($target_fr)) {
                $target_fr = $target;
              }
            }
            else {
              $target_flag = 1;
            }
            break;

          case 4:
            if (strlen($data[$i][$j]) != 0) {
              $t_weight = $data[$i][$j];
            }
            break;

          case 5:
            if (strlen($data[$i][$j]) != 0) {
              $indicator = $data[$i][$j];
              $ind_code = 'in'. $i;
            }
            break;

          case 6:
            $weight = (float)$data[$i][$j];
            break;

          case 7:
            $indicator_value = (float)$data[$i][$j];
            if($current_year == $submit_year){
              $aggregate_method = $aggregate_type[$indicator];
              if($aggregate_method == 'weighted_average'){
                $indicator_region_avg = agenda_template_aggregate_score($region_short_code, $country_short_code, $current_year, $indicator_value);
                $context['results']['pub_region_aggregate'][$current_year][$region_id][$indicator]['indicator_value'] += $indicator_region_avg;
                foreach ($rec_array as $key => $rec_result) { 
                  $rec_id = $rec_result['rec_id'];
                  $rec_code = $rec_result['rec_code'];
                  $indicator_rec_avg = agenda_template_aggregate_score($rec_code, $country_short_code, $current_year, $indicator_value);
                  $context['results']['pub_rec_aggregate'][$current_year][$rec_id][$indicator]['indicator_value'] += $indicator_rec_avg;
                }
                $indicator_cond_avg = agenda_template_aggregate_score($cont_code, $country_short_code, $current_year, $indicator_value);
                $context['results']['pub_cont_aggregate'][$current_year][$cont_id][$indicator]['indicator_value'] += $indicator_cond_avg;
              }
              else{
                $indicator_region_avg = $indicator_value/$country_region_count;
                $context['results']['pub_region_aggregate'][$current_year][$region_id][$indicator]['indicator_value'] += $indicator_region_avg;
                foreach ($rec_array as $key => $rec_result) { 
                  $rec_id = $rec_result['rec_id'];
                  $country_rec_count = agenda_template_rec_countries_count($rec_id);
                  $indicator_rec_avg = $indicator_value/$country_rec_count;
                  $context['results']['pub_rec_aggregate'][$current_year][$rec_id][$indicator]['indicator_value'] += $indicator_rec_avg;
                }
                $indicator_cond_avg = $indicator_value/$country_cont_count;
                $context['results']['pub_cont_aggregate'][$current_year][$cont_id][$indicator]['indicator_value'] += $indicator_cond_avg;
              }
            }
            break;

          case 8:
            $base_value = $data[$i][$j];
            break;

          case 9:
            $indicator_performance = (float)$data[$i][$j];
            if($current_year == $submit_year){
              $indicator_region_avg = $indicator_performance/$country_region_count;
              $context['results']['pub_region_aggregate'][$current_year][$region_id][$indicator]['indicator_performance'] += $indicator_region_avg;
              foreach ($rec_array as $key => $rec_result) { 
                $rec_id = $rec_result['rec_id'];
                $country_rec_count = agenda_template_rec_countries_count($rec_id);
                $indicator_rec_avg = $indicator_performance/$country_rec_count;
                $context['results']['pub_rec_aggregate'][$current_year][$rec_id][$indicator]['indicator_performance'] += $indicator_rec_avg;
              }
              $indicator_cond_avg = $indicator_performance/$country_cont_count;
              $context['results']['pub_cont_aggregate'][$current_year][$cont_id][$indicator]['indicator_performance'] += $indicator_cond_avg;
            }
            break;

          case 10:
            $expected_increase = (float)$data[$i][$j];
            break;

          case 11:
            // $expected_performance = (float)$data[$i][$j];
            $expected_performance = (float)$data[$i][$j+7];
            break;

          case 12:
              if (strlen($data[$i][$j]) != 0) {
                $performance_rating = $data[$i][$j];
              }
            break;

          case 14:
            if (strlen($data[$i][$j]) != 0) {
              $priority_scores = $data[$i][$j];
            }
            break;

          case 15:
            if (strlen($data[$i][$j]) != 0) {
              $indexed_priority_dashboard = $data[$i][$j];
              if($current_year == $submit_year){
                $priority_region_avg = $indexed_priority_dashboard/$country_region_count;
                $context['results']['pub_region_aggregate'][$current_year][$region_id][$priority]['dashboard_performance'] += $priority_region_avg;
                foreach ($rec_array as $key => $rec_result) { 
                  $rec_id = $rec_result['rec_id'];
                  $priority_rec_avg = $indexed_priority_dashboard/$country_rec_count;
                  $context['results']['pub_rec_aggregate'][$current_year][$rec_id][$priority]['dashboard_performance'] += $priority_rec_avg;
                }
                $priority_cont_avg = $indexed_priority_dashboard/$country_cont_count;
                $context['results']['pub_cont_aggregate'][$current_year][$cont_id][$priority]['dashboard_performance'] += $priority_cont_avg;
              }
            }
            break;

          default:
            break;
        }
      }
    }

    if (($i >= $start) && ($i <= 115) && (!in_array($i, $asp_array)) && (!in_array($i, $goal_array))) {


      $result['name']                                                                                                       = $country_code;
      $result['region_name']                                                                                                = $region_code;
      $result['name_en']                                                                                                    = $country_code;
      $result['region_name_en']                                                                                             = $region_code;
      $result['overall_performance_rating']                                                                                 = $overall_performance_rating;
      $result['year']                                                                                                       = $current_year;
      $result[$country_code][$asp_code]['aspiration']                                                                            = $asp_code;
      $result[$country_code][$asp_code]['aspiration_title']                                                                      = $asp_code;
      $result[$country_code][$asp_code]['asp_priority_dashboard']                                                                = $asp_priority_dashboard;
      $result[$country_code][$asp_code]['asp_priority_scores']                                                                   = $asp_priority_scores;
      $result[$country_code][$asp_code]['asp_indexed_priority']                                                                  = $asp_indexed_priority;
      $result[$country_code][$asp_code][$goal_code]['goal']                                                                         = $goal_code;
      $result[$country_code][$asp_code][$goal_code]['goal_indexed_priority']                                                        = $goal_indexed_priority;
      $result[$country_code][$asp_code][$goal_code][$prt_code]['priority']                                                          = $prt_code;
      $result[$country_code][$asp_code][$goal_code][$prt_code]['indexed_priority_dashboard']                                        = $indexed_priority_dashboard;
      $result[$country_code][$asp_code][$goal_code][$prt_code]['p_weight']                                                          = $p_weight;
      $result[$country_code][$asp_code][$goal_code][$prt_code]['priority_scores']                                                   = $priority_scores;
      $result[$country_code][$asp_code][$goal_code][$prt_code]['target'][$tgt_code]['agenda_target']                                  = $tgt_code;
      $result[$country_code][$asp_code][$goal_code][$prt_code]['target'][$tgt_code]['t_weight']                                       = $t_weight;
      $result[$country_code][$asp_code][$goal_code][$prt_code]['target'][$tgt_code]['indicator'][$ind_code]['indicator_name']        = $ind_code;
      $result[$country_code][$asp_code][$goal_code][$prt_code]['target'][$tgt_code]['indicator'][$ind_code]['weight']                = $weight;
      $result[$country_code][$asp_code][$goal_code][$prt_code]['target'][$tgt_code]['indicator'][$ind_code]['indicator_value']       = $indicator_value;
      $result[$country_code][$asp_code][$goal_code][$prt_code]['target'][$tgt_code]['indicator'][$ind_code]['base_value']            = $base_value;
      $result[$country_code][$asp_code][$goal_code][$prt_code]['target'][$tgt_code]['indicator'][$ind_code]['indicator_performance'] = $indicator_performance;
      $result[$country_code][$asp_code][$goal_code][$prt_code]['target'][$tgt_code]['indicator'][$ind_code]['expected_performance']  = $expected_performance;
      $result[$country_code][$asp_code][$goal_code][$prt_code]['target'][$tgt_code]['indicator'][$ind_code]['performance_rating']    = $performance_rating;


      $agenda_2063[$_SESSION['incre_pub']]['country'] = $country_code;
      $agenda_2063[$_SESSION['incre_pub']]['country_en'] = $country_code;
      $agenda_2063[$_SESSION['incre_pub']]['region_name'] = $region_code;
      $agenda_2063[$_SESSION['incre_pub']]['year'] = $current_year;
      $agenda_2063[$_SESSION['incre_pub']]['aspiration'] = $asp_code;
      $agenda_2063[$_SESSION['incre_pub']]['aspiration_title'] = $asp_code;
      $agenda_2063[$_SESSION['incre_pub']]['asp_priority_dashboard'] = $asp_priority_dashboard;
      $agenda_2063[$_SESSION['incre_pub']]['asp_priority_scores'] = $asp_priority_scores;
      $agenda_2063[$_SESSION['incre_pub']]['asp_indexed_priority'] = $asp_indexed_priority;
      $agenda_2063[$_SESSION['incre_pub']]['goal'] = $goal_code;
      $agenda_2063[$_SESSION['incre_pub']]['goal_indexed_priority'] = $goal_indexed_priority;
      $agenda_2063[$_SESSION['incre_pub']]['priority'] = $prt_code;
      $agenda_2063[$_SESSION['incre_pub']]['p_weight'] = $p_weight;
      $agenda_2063[$_SESSION['incre_pub']]['target'] = $tgt_code;
      $agenda_2063[$_SESSION['incre_pub']]['t_weight'] = $t_weight;
      $agenda_2063[$_SESSION['incre_pub']]['indicator'] = $ind_code;
      $agenda_2063[$_SESSION['incre_pub']]['weight'] = $weight;
      $agenda_2063[$_SESSION['incre_pub']]['indicator_value'] = $indicator_value;
      $agenda_2063[$_SESSION['incre_pub']]['indicator_performance'] = $indicator_performance;
      $agenda_2063[$_SESSION['incre_pub']]['performance_rating'] = $performance_rating;
      $agenda_2063[$_SESSION['incre_pub']]['priority_scores'] = $priority_scores;
      $agenda_2063[$_SESSION['incre_pub']]['indexed_priority_dashboard'] = $indexed_priority_dashboard;

      $_SESSION['incre_pub']++;

    }
  }
  $context['results']['count']++;
  $context['results']['country'] = $country;
  $context['results']['year'] = $current_year;

  $context['results']['pub_country_results']['agenda_sample_en']['data'][] = $result;    
  $context['results']['pub_country_results']['agenda_2063_en']['data'][] = $agenda_2063;

}

/**
 * Batch finished.
 */
public function agenda_dashboard_publish_finished($success, $results, $operations) {
  if ($success) {
    $message = \Drupal::translation()->formatPlural(
    count($results),
    'Xlsx processed.', 'Successfully created the combined file. <a href="/agenda-dashboard">Go to Dashboard</a>'
    );
   \Drupal\agenda_template\Form\CustomTemplateForm::agenda_dashboard_publish_file($results['pub_country_results']);

    agenda_template_year_region_xlxs_insert($results['pub_region_aggregate']);
    agenda_template_year_rec_xlxs_insert($results['pub_rec_aggregate']);
    agenda_template_year_condinental_xlxs_insert($results['pub_cont_aggregate']);

  }
  else {
    $message = t('Finished with an error.');
    \Drupal::messenger()->addMessage($message);
  }
}


/**
 * Function create jsom file.
 */
public function agenda_dashboard_publish_file($country_results) {

  $path     = drupal_realpath('public://');
  $destination = $path."/agenda_dashboard_year";
  if (!file_exists($destination)) {
    mkdir($destination, 777, TRUE);
  }

  foreach ($country_results as $key => $country_data) {
    $map_data = $country_data; 
    $fp_a     = fopen($path . '/agenda_dashboard_year/' . $key . '.json', 'w');
    $map_data = json_encode($map_data, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);
    $map_data = str_replace('\\', '', $map_data);
    $map_data = trim($map_data, '"');
    fwrite($fp_a, $map_data);
    fclose($fp_a);
  }

  \Drupal::messenger()->addMessage('Successfully Published Data');

}


/**
 * To create the excluded country .
 */
public function agenda_region_country_latest_exclude($country_id, $key_items) {

  $vid = 'regional_clusters';
  $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid);
  foreach ($terms as $term) {
    $region_load = Term::load($term->tid);
    $region_countries = $region_load->get('field_countries')->getValue();
    foreach ($region_countries as $region_country) {
      if (!in_array($region_country['target_id'], $country_id)) {
        $region_name = $region_load->get('name')->getString();
        $region_name_fr = $key_items[trim($region_name)];
        if (empty($region_name_fr)) {
          $region_name_fr = $region_name;
        }
        $country_load = Term::load($region_country['target_id']);
        $country = $country_load->get('name')->getString();
        $country_fr = $key_items[trim($country)];
        if (empty($country_fr)) {
          $country_fr = $country;
        }
        $exclude_countries[$region_name][] = $country;
        $exclude_countries_fr[$region_name_fr][] = $country_fr;
      }
    }
  }
  $path     = drupal_realpath('public://');
  $destination = $path."/agenda_dashboard/region";
  if (!file_exists($destination)) {
    mkdir($destination, 777, TRUE);
  }
  $map_data = $exclude_countries;
  $fp_a     = fopen($path . '/agenda_dashboard/region/region_countries_exclude_en.json', 'w');
  $map_data = json_encode($map_data, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);
  $map_data = str_replace('\\', '', $map_data);
  $map_data = trim($map_data, '"');
  fwrite($fp_a, $map_data);
  fclose($fp_a);
  $map_data = $exclude_countries_fr;
  $fp_a     = fopen($path . '/agenda_dashboard/region/region_countries_exclude_fr.json', 'w');
  $map_data = json_encode($map_data, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);
  $map_data = str_replace('\\', '', $map_data);
  $map_data = trim($map_data, '"');
  fwrite($fp_a, $map_data);
  fclose($fp_a);
}


/**
 * To create the excluded country .
 */
public function agenda_country_region_key_json($key_items, $cont_id) {
  
  $json_array = [];
  $region_vid = 'regional_clusters';
  $region_terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($region_vid);
  foreach ($region_terms as $region_term) {
    $region_id = $region_term->tid;
    $region_load = Term::load($region_id);
    $region = $region_load->get('name')->getString();
    $region_code = 'rg' . $region_id;
    $region_fr = $key_items[trim($region)];
    $json_array['region_name_list_en']['en'][$region_code]['region'] = $region;
    $json_array['region_name_list_en']['en'][$region_code]['region_en'] = $region;
    $json_array['region_name_list_en']['fr'][$region_code]['region'] = $region_fr;
    $json_array['region_name_list_en']['fr'][$region_code]['region_en'] = $region;
  }

  $country_vid = 'countries';
  $country_terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($country_vid);
  $country_remove = ['221', '220', '226'];
  foreach ($country_terms as $country_term) {
    $country_id = $country_term->tid;
    if(!in_array($country_id, $country_remove)){
      $country_load = Term::load($country_id);
      $country = $country_load->get('name')->getString();
      $country_code = 'cn' . $country_id;
      $country_fr = $key_items[trim($country)];
      $json_array['country_name_list_en']['en'][$country_code]['country'] = $country;
      $json_array['country_name_list_en']['en'][$country_code]['country_en'] = $country;
      $json_array['country_name_list_en']['fr'][$country_code]['country'] = $country_fr;
      $json_array['country_name_list_en']['fr'][$country_code]['country_en'] = $country;
    }
  }

  $rec_vid = 'rec_grouping';
  $rec_terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($rec_vid);
  foreach ($rec_terms as $rec_term) {
    $rec_id = $rec_term->tid;
    if($rec_id != $cont_id){
      $rec_load = Term::load($rec_id);
      $rec = $rec_load->get('name')->getString();
      $rec_short_title = $rec_load->get('field_short_title')->getString();
      $rec_code = 'rc' . $rec_id;
      $rec_fr = $key_items[trim($rec)];
      $json_array['rec_name_list_en']['en'][$rec_code]['rec'] = $rec;
      $json_array['rec_name_list_en']['en'][$rec_code]['rec_short_title'] = $rec_short_title;
      $json_array['rec_name_list_en']['fr'][$rec_code]['rec'] = $rec_fr;
      $json_array['rec_name_list_en']['fr'][$rec_code]['rec_short_title'] = $rec_short_title;
    }
  }

  $path     = drupal_realpath('public://');
  foreach ($json_array as $key => $key_data) {
    $map_data = $key_data; 
    $fp_a     = fopen($path . '/agenda_dashboard/' . $key . '.json', 'w');
    $map_data = json_encode($map_data, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);
    $map_data = str_replace('\\', '', $map_data);
    $map_data = trim($map_data, '"');
    fwrite($fp_a, $map_data);
    fclose($fp_a);
  }

}

/**
 * latest json creation
 */
public function agenda_dashboard_latest_combine($current_year) {
  
  $cont_id = 116;
  unset($_SESSION['region_country_check']);
  unset($_SESSION['rec_country_check']);

  $query_max = \Drupal::database()->select('indicator_data_main');
  $query_max->addExpression('MAX(year)');
  $max_year = $query_max->execute()->fetchField();
  
  if($current_year == $max_year){
    $query_id = \Drupal::database()->select('indicator_data_main', 'ind'); 
    $query_id->fields('ind', ['country_id']);
    $query_id->fields('ind', ['year']);
    // $query_id->condition('ind.country_id', ['155','158'], IN); 
    // $query_id->condition('ind.country_id', ['155','123','141','165','168'], IN); 
    // $query_id->condition('ind.country_id', ['155','123','168'], IN); 
    $query_id->condition('ind.year', $max_year, '='); 
    $query_id->distinct();
    $results = $query_id->execute();
    $key_items = agenda_template_french_key_items();
    foreach ($results as $key => $country_value) {
      $country_id = $country_value->country_id;
      $country_set[] = $country_id;
      $query_max = \Drupal::database()->select('indicator_data_main');
      $query_max->addExpression('MAX(version)');
      $query_max->condition('country_id', $country_id, "=");
      $query_max->condition('year', $current_year, "=");
      $max_version = $query_max->execute()->fetchField();

      $query_data = \Drupal::database()->select('indicator_data_main', 'ind'); 
      $query_data->fields('ind', ['indicator_id','current_value','base_value','date_entry','data_source','publish_year','remarks','year','country_id','version']);
      $query_data->condition('ind.country_id', $country_id, "=");
      $query_data->condition('ind.year', $current_year, "=");
      $query_data->condition('ind.version', $max_version, "=");
      $xlsx_results = $query_data->execute();

      $row = $this->agenda_dashboard_publish_xlxs_engine($xlsx_results, $current_year, $country_id);

      $query_node = db_select('node_field_data', 'n');
      $query_node->fields('n', ['nid', 'langcode']);
      $query_node->fields('xlsx_download', ['field_agenda_xlsx_download_target_id']);
      $query_node->fields('pdf', ['field_upload_pdf_target_id']);
      $query_node->fields('xlsx_download_fr', ['field_agenda_xlsx_download_fr_target_id']);
      $query_node->fields('pdf_fr', ['field_upload_pdf_french_target_id']);
      $query_node->fields('country', ['field_agenda_country_target_id']);
      $query_node->condition('n.status', '1', '=');
      $query_node->condition('n.langcode', 'en', '=');
      $query_node->condition('n.type', 'agenda_dashboard_data', '=');
      $query_node->condition('country.field_agenda_country_target_id', $country_id, '=');

      $query_node->leftJoin('node__field_agenda_xlsx_download', 'xlsx_download', 'xlsx_download.entity_id = n.nid  and xlsx_download.langcode = n.langcode');
      $query_node->leftJoin('node__field_upload_pdf', 'pdf', 'pdf.entity_id = n.nid  and pdf.langcode = n.langcode');
      $query_node->leftJoin('node__field_agenda_xlsx_download_fr', 'xlsx_download_fr', 'xlsx_download_fr.entity_id = n.nid  and xlsx_download_fr.langcode = n.langcode');
      $query_node->leftJoin('node__field_upload_pdf_french', 'pdf_fr', 'pdf_fr.entity_id = n.nid  and pdf_fr.langcode = n.langcode');
      $query_node->leftJoin('node__field_agenda_country', 'country', 'country.entity_id = n.nid  and country.langcode = n.langcode');
      $query_node_data = $query_node->execute()->fetchAll();

      foreach ($query_node_data as $result) {
        $public = drupal_realpath('public://');
        $xlsx_download_id = $result->field_agenda_xlsx_download_target_id;
        if (!empty($xlsx_download_id)) {
          $xlsx_download = File::load($xlsx_download_id);
          $xlsx_path = drupal_realpath($xlsx_download->getFileUri());
          $node_files['xlsx_download_uri'] = '/sites/default/files' . str_replace($public, '', $xlsx_path);
        }
        else {
          $node_files['xlsx_download_uri'] = "No file available";
        }
        $pdf_id = $result->field_upload_pdf_target_id;
        if (!empty($pdf_id)) {
          $pdf = File::load($pdf_id);
          $pdf_path = drupal_realpath($pdf->getFileUri());
          $node_files['pdf_uri'] = '/sites/default/files' . str_replace($public, '', $pdf_path);
        }
        else {
          $node_files['pdf_uri'] = "No file available";
        }
        $xlsx_download_id_fr = $result->field_agenda_xlsx_download_fr_target_id;
        if (!empty($xlsx_download_id_fr)) {
          $xlsx_download_fr = File::load($xlsx_download_id_fr);
          $xlsx_fr_path = drupal_realpath($xlsx_download_fr->getFileUri());
          $node_files['xlsx_download_uri_fr'] = '/sites/default/files' . str_replace($public, '', $xlsx_fr_path);
        }
        else {
          $node_files['xlsx_download_uri_fr'] = "No file available";
        }
        $pdf_id_fr = $result->field_upload_pdf_french_target_id;
        if (!empty($pdf_id_fr)) {
          $pdf_fr = File::load($pdf_id_fr);
          $pdf_fr_path = drupal_realpath($pdf_fr->getFileUri());
          $node_files['pdf_uri_fr'] = '/sites/default/files' . str_replace($public, '', $pdf_fr_path);
        }
        else {
          $node_files['pdf_uri_fr'] = "No file available";
        }
      }
      $operations[]=['\Drupal\agenda_template\Form\CustomTemplateForm::agenda_dashboard_latest_data_json', [$row, $country_id, $key_items, $current_year, $node_files, $cont_id]];
    }

    $this->agenda_region_country_latest_exclude($country_set, $key_items);
    $this->agenda_country_region_key_json($key_items, $cont_id);

    $batch_latest_country = [
    'title' => t('Exporting the Agenda Dashboard Latest Data ('. $current_year .')'),
    'operations' => $operations,
    'finished' => '\Drupal\agenda_template\Form\CustomTemplateForm::agenda_dashboard_latest_finished',
    'error_message' => t('The Creation encountered an error.'),
    'progress_message' => t('creating country profile @current of @total profiles. Please wait.'),
    ];
    batch_set($batch_latest_country);

  }
}



/**
 * Function to create json data from xls.
 */
public function agenda_dashboard_latest_data_json($row, $country_id, $key_items, $current_year, $node_files, $cont_id, &$context) {

  $_SESSION['incre_lat'] = 0;
  $country_check = [];
  $country_term = Term::load($country_id);
  $country_code = 'cn' . $country_id;
  $country = $country_term->get('name')->getString();
  $country_short_code = $country_term->get('field_country_key')->value;
  $country_fr = $key_items[trim($country)];
  if (empty($country_fr)) {
    $country_fr = $country;
  }

  $region_array = agenda_template_load_regions($country_id);
  $region_code = $region_array['region_code'];
  $region_id = $region_array['region_id'];
  $region_code = 'rg' . $region_id;
  $region_name = $region_array['region_name'];
  $region_name_fr = $key_items[trim($region_name)];
  if(!in_array($country, $_SESSION['region_country_check'])){
    $_SESSION['region_country_check'][] = $country;
    $context['results']['lat_region_data'][$region_code][] = $country_code;
  }

  $rec_array = agenda_template_load_recs($country_id, $cont_id);
  if(!in_array($country, $_SESSION['rec_country_check'])){
    $_SESSION['rec_country_check'][] = $country;
    foreach ($rec_array as $key => $rec_result) {
      $rec_name = $rec_result['rec_name'];
      $rec_id = $rec_result['rec_id'];
      $rec_code = 'rc' . $rec_id;
      $rec_name_fr = $key_items[$rec_name];
      $context['results']['lat_rec_data'][$rec_code][] = $country_code;
    }
  }

  $country_xlsx_path  =  '/sites/default/files/agenda_dashboard/xlsx_upload/Agenda_Dashboard_' . $country . '_' . $current_year . '.xlsx';
  // $country_xlsx_path = $node_files['xlsx_download_uri'];
  $pdf_uri_path = $node_files['pdf_uri'];
  // $country_xlsx_path_fr = $node_files['xlsx_download_uri_fr'];
  $country_xlsx_path_fr = '/sites/default/files/agenda_dashboard/xlsx_upload/Agenda_Dashboard_' . $country . '_' . $current_year . '.xlsx';
  $pdf_uri_path_fr = $node_files['pdf_uri_fr'];

  $data       = $row;
  $result     = $aspiration_list = [];
  $asp_array  = ['8', '54', '71', '81', '90', '93', '106'];
  $goal_array = ['9', '21', '26', '36', '41', '47', '50', '55', '59', '63', '72', '79', '82', '84', '87', '91', '94', '100', '107', '111'];

  $start = 10;
  $k = $n = 0;
  $target_flag = 0;
  $indicator_count = 0;

  for ($i = 0; $i < count($data); $i++) {
    for ($j = 0; $j < count($data[$i]); $j++) {
      if (($i == 3) && ($j == 15)) {
        $overall_performance_rating = round($data[$i][$j]);
      }
      elseif ((in_array($i, $asp_array)) && $j == 1) {
        if (!empty($data[$i][$j])) {
          $aspiration      = $data[$i][$j];
          $asp_code = 'as'. $i;
          $aspiration_name = explode(":", $aspiration);
          if ($aspiration_name[0] == $aspiration) {
            $aspiration_name = explode(".", $aspiration);
          }
          $aspiration_fr = $key_items[trim($aspiration)];
          if (empty($aspiration_fr)) {
            $aspiration_fr = $aspiration;
          }
          $aspiration_name_fr = explode(":", $aspiration_fr);
          if ($aspiration_name_fr[0] == $aspiration_fr) {
            $aspiration_name_fr = explode(".", $aspiration_fr);
          }
          $asp_priority_dashboard = $data[$i][13];
          $asp_priority_scores    = $data[$i][14];
          $asp_indexed_priority   = $data[$i][15];
        }
      }

      elseif ((in_array($i, $goal_array)) && $j == 1) {
        if (!empty($data[$i][$j])) {
          $goal      = $data[$i][$j];
          $goal_code = 'gl'. $i;
          $goal_name = explode(":", $goal);
          $goal_title = ltrim($goal_name[1]);
          $goal      = strtoupper($goal_name[0]) . ":" . $goal_name[1];
          $goal_fr   = $key_items[trim($goal)];
          $goal_name_fr = explode(":", $goal_fr);
          $goal_title_fr = ltrim($goal_name_fr[1]);
          if (empty($goal_fr)) {
            $goal_fr = $goal;
          }
          $goal_indexed_priority = $data[$i][15];
        }
      }

      elseif ((!in_array($i, $asp_array)) && (!in_array($i, $goal_array)) && ($i >= $start)) {
        switch ($j) {
          case 1:
            if (strlen($data[$i][$j]) != 0) {
              $priority = $data[$i][$j];
              $prt_code = 'pr'. $i;
              $priority_name = explode(".", $priority);
              if (empty($priority_name[1])) {
                $priority_name[1] = $priority_name[0];
              }
              $priority_fr = $key_items[trim($priority)];
              $priority_name_fr = explode(".", $priority_fr);
              if (empty($priority_fr)) {
                $priority_fr = $priority;
              }
            }
            break;

          case 2:
            if (strlen($data[$i][$j]) != 0) {
              $p_weight = $data[$i][$j];
            }
            break;

          case 3:
            if (strlen($data[$i][$j]) != 0) {
              $target = $data[$i][$j];
              $tgt_code = 'tr'. $i;
              $target_fr = $key_items[trim($target)];
              if (empty($target_fr)) {
                $target_fr = $target;
              }
            }
            else {
              $target_flag = 1;
            }
            break;

          case 4:
            if (strlen($data[$i][$j]) != 0) {
              $t_weight = $data[$i][$j];
            }
            break;

          case 5:
            if (strlen($data[$i][$j]) != 0) {
              $indicator = $data[$i][$j];
              $ind_code = 'in'. $i;
              $indicator_fr = $key_items[trim($indicator)];
            }
            break;

          case 6:
            $weight = (float)$data[$i][$j];
            break;

          case 7:
            $indicator_value = (float)$data[$i][$j];
            break;

          case 9:
            $indicator_performance = (float)$data[$i][$j];
            break;

          case 12:
            if (strlen($data[$i][$j]) != 0) {
              $performance_rating = $data[$i][$j];
            }
            break;

          case 14:
            if(strlen($data[$i][$j]) != 0) {
              $priority_scores = $data[$i][$j];
            }
            break;

          case 15:
            if (strlen($data[$i][$j]) != 0) {
              $indexed_priority_dashboard = $data[$i][$j];
            }
            break;

          default:
            break;
        }
      }
    }

    if (($i >= $start) && ($i <= 115) && (!in_array($i, $asp_array)) && (!in_array($i, $goal_array))) {

      $aspiration_name_list_en['en'][$asp_code]['aspiration'] = $aspiration;
      $aspiration_name_list_en['en'][$asp_code]['aspiration_title'] = ltrim($aspiration_name[1]);
      $aspiration_name_list_en['fr'][$asp_code]['aspiration'] = $aspiration_fr;
      $aspiration_name_list_en['fr'][$asp_code]['aspiration_title'] = ltrim($aspiration_name_fr[1]);

      $goal_name_list_en['en'][$goal_code]['goal'] = $goal;
      $goal_name_list_en['en'][$goal_code]['goal_title'] = $goal_title;
      $goal_name_list_en['fr'][$goal_code]['goal'] = $goal_fr;
      $goal_name_list_en['fr'][$goal_code]['goal_title'] = $goal_title_fr;

      $priority_name_list_en['en'][$prt_code]['priority'] = $priority;
      $priority_name_list_en['en'][$prt_code]['priority_title'] = ltrim($priority_name[1]);
      $priority_name_list_en['fr'][$prt_code]['priority'] = $priority_fr;
      $priority_name_list_en['fr'][$prt_code]['priority_title'] = ltrim($priority_name_fr[1]);

      $target_name_list_en['en'][$tgt_code]['target'] = $target;
      $target_name_list_en['fr'][$tgt_code]['target'] = $target_fr;

      $indicator_name_list_en['en'][$ind_code]['indicator'] = $indicator;
      $indicator_name_list_en['fr'][$ind_code]['indicator'] = $indicator_fr;


      $result['name']                                                                                                       = $country_code;
      $result['region_name']                                                                                                = $region_code;
      $result['name_en']                                                                                                    = $country_code;
      $result['region_name_en']                                                                                             = $region_code;
      $result['download_xlsx_path']                                                                                         = $country_xlsx_path;
      $result['download_xlsx_path_fr']                                                                                      = $country_xlsx_path_fr;
      $result['pdf_uri_path']                                                                                               = $pdf_uri_path;
      $result['pdf_uri_path_fr']                                                                                            = $pdf_uri_path_fr;
      $result['overall_performance_rating']                                                                                 = $overall_performance_rating;
      $result[$country_code][$asp_code]['aspiration']                                                                            = $asp_code;
      $result[$country_code][$asp_code]['aspiration_title']                                                                      = $asp_code;
      $result[$country_code][$asp_code]['asp_priority_dashboard']                                                                = $asp_priority_dashboard;
      $result[$country_code][$asp_code]['asp_priority_scores']                                                                   = $asp_priority_scores;
      $result[$country_code][$asp_code]['asp_indexed_priority']                                                                  = $asp_indexed_priority;
      $result[$country_code][$asp_code][$goal_code]['goal']                                                                         = $goal_code;
      $result[$country_code][$asp_code][$goal_code]['goal_indexed_priority']                                                        = $goal_indexed_priority;
      $result[$country_code][$asp_code][$goal_code][$prt_code]['priority']                                                          = $prt_code;
      $result[$country_code][$asp_code][$goal_code][$prt_code]['indexed_priority_dashboard']                                        = $indexed_priority_dashboard;
      $result[$country_code][$asp_code][$goal_code][$prt_code]['p_weight']                                                          = $p_weight;
      $result[$country_code][$asp_code][$goal_code][$prt_code]['priority_scores']                                                   = $priority_scores;
      $result[$country_code][$asp_code][$goal_code][$prt_code]['target'][$tgt_code]['agenda_target']                                = $tgt_code;
      $result[$country_code][$asp_code][$goal_code][$prt_code]['target'][$tgt_code]['t_weight']                                     = $t_weight;
      $result[$country_code][$asp_code][$goal_code][$prt_code]['target'][$tgt_code]['indicator'][$ind_code]['indicator_name']        = $ind_code;
      $result[$country_code][$asp_code][$goal_code][$prt_code]['target'][$tgt_code]['indicator'][$ind_code]['weight']                = $weight;
      $result[$country_code][$asp_code][$goal_code][$prt_code]['target'][$tgt_code]['indicator'][$ind_code]['indicator_value']       = $indicator_value;
      $result[$country_code][$asp_code][$goal_code][$prt_code]['target'][$tgt_code]['indicator'][$ind_code]['indicator_performance'] = $indicator_performance;
      $result[$country_code][$asp_code][$goal_code][$prt_code]['target'][$tgt_code]['indicator'][$ind_code]['performance_rating']    = $performance_rating;


      /* Data for the homepage */
      $home_goal['name']                                        = $country_code;
      $home_goal['region_name']                                 = $region_code;
      $home_goal[$country][$goal_code]['goal']                  = $goal_code;
      $home_goal[$country][$goal_code]['goal_indexed_priority'] = $goal_indexed_priority;

      $agenda_2063[$_SESSION['incre_lat']]['country'] = $country_code;
      $agenda_2063[$_SESSION['incre_lat']]['country_en'] = $country_code;
      $agenda_2063[$_SESSION['incre_lat']]['region_name'] = $region_code;
      $agenda_2063[$_SESSION['incre_lat']]['aspiration'] = $asp_code;
      $agenda_2063[$_SESSION['incre_lat']]['aspiration_title'] = $asp_code;
      $agenda_2063[$_SESSION['incre_lat']]['asp_priority_dashboard'] = $asp_priority_dashboard;
      $agenda_2063[$_SESSION['incre_lat']]['asp_priority_scores'] = $asp_priority_scores;
      $agenda_2063[$_SESSION['incre_lat']]['asp_indexed_priority'] = $asp_indexed_priority;
      $agenda_2063[$_SESSION['incre_lat']]['goal'] = $goal_code;
      $agenda_2063[$_SESSION['incre_lat']]['goal_indexed_priority'] = $goal_indexed_priority;
      $agenda_2063[$_SESSION['incre_lat']]['priority'] = $prt_code;
      $agenda_2063[$_SESSION['incre_lat']]['p_weight'] = $p_weight;
      $agenda_2063[$_SESSION['incre_lat']]['target'] = $tgt_code;
      $agenda_2063[$_SESSION['incre_lat']]['t_weight'] = $t_weight;
      $agenda_2063[$_SESSION['incre_lat']]['indicator'] = $ind_code;
      $agenda_2063[$_SESSION['incre_lat']]['weight'] = $weight;
      $agenda_2063[$_SESSION['incre_lat']]['indicator_value'] = $indicator_value;
      $agenda_2063[$_SESSION['incre_lat']]['indicator_performance'] = $indicator_performance;
      $agenda_2063[$_SESSION['incre_lat']]['performance_rating'] = $performance_rating;
      $agenda_2063[$_SESSION['incre_lat']]['priority_scores'] = $priority_scores;
      $agenda_2063[$_SESSION['incre_lat']]['indexed_priority_dashboard'] = $indexed_priority_dashboard;

      $_SESSION['incre_lat']++;

    }
  }


  $context['results']['count']++;
  $context['results']['country'] = $country;
  $context['results']['year'] = $current_year;

  $context['results']['lat_name_results']['aspiration_name_list_en'] = $aspiration_name_list_en;
  $context['results']['lat_name_results']['goal_name_list_en'] = $goal_name_list_en;
  $context['results']['lat_name_results']['priority_name_list_en'] = $priority_name_list_en;
  $context['results']['lat_name_results']['target_name_list_en'] = $target_name_list_en;
  $context['results']['lat_name_results']['indicator_name_list_en'] = $indicator_name_list_en;

  $context['results']['lat_country_results']['agenda_sample_en']['data'][] = $result;    
  $context['results']['lat_country_results']['agenda_2063_en']['data'][] = $agenda_2063;
  $context['results']['lat_country_results']['home_country_goal_en']['data'][] = $home_goal;

}

/**
 * Batch finished.
 */
public function agenda_dashboard_latest_finished($success, $results, $operations) {
  if ($success) {
    $message = \Drupal::translation()->formatPlural(
    count($results),
    'Xlsx processed.', 'Successfully created the combined file. <a href="/agenda-dashboard">Go to Dashboard</a>'
    );
    \Drupal\agenda_template\Form\CustomTemplateForm::agenda_dashboard_latest_file($results['lat_country_results']); 
    \Drupal\agenda_template\Form\CustomTemplateForm::agenda_name_list_latest_file($results['lat_name_results']);
    \Drupal\agenda_template\Form\CustomTemplateForm::agenda_region_country_latest_file($results['lat_region_data']);   
    \Drupal\agenda_template\Form\CustomTemplateForm::agenda_rec_country_latest_file($results['lat_rec_data']);  

  }
  else {
    $message = t('Finished with an error.');
    \Drupal::messenger()->addMessage($message);
  }
}


/**
 * Function create jsom file.
 */
public function agenda_dashboard_latest_file($country_results) {

  $path     = drupal_realpath('public://');
  $destination = $path."/agenda_dashboard";
  if (!file_exists($destination)) {
    mkdir($destination, 777, TRUE);
  }
  foreach ($country_results as $key => $country_data) {
    $map_data = $country_data; 
    $fp_a     = fopen($path . '/agenda_dashboard/' . $key . '.json', 'w');
    $map_data = json_encode($map_data, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);
    $map_data = str_replace('\\', '', $map_data);
    $map_data = trim($map_data, '"');
    fwrite($fp_a, $map_data);
    fclose($fp_a);
  }
}


/**
* Function Write jsom file.
*/
public function agenda_name_list_latest_file($name_results) {
  $path = drupal_realpath('public://');
  foreach ($name_results as $key => $name_data) {
    $map_data = $name_data; 
    $fp_a     = fopen($path . '/agenda_dashboard/' . $key . '.json', 'w');
    $map_data = json_encode($map_data, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);
    $map_data = str_replace('\\', '', $map_data);
    $map_data = trim($map_data, '"');
    fwrite($fp_a, $map_data);
    fclose($fp_a);
  }

 \Drupal::messenger()->addMessage('Successfully Published Data');
}

  /**
 * Create json file.
 */
public function agenda_region_country_latest_file($region_data) {
  $path = drupal_realpath('public://');
  $destination = $path."/agenda_dashboard/region";
  if (!file_exists($destination)) {
    mkdir($destination, 777, TRUE);
  }

  $map_data = $region_data;
  $fp_a     = fopen($path . '/agenda_dashboard/region/region_countries_en.json', 'w');
  $map_data = json_encode($map_data, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);
  $map_data = str_replace('\\', '', $map_data);
  $map_data = trim($map_data, '"');
  fwrite($fp_a, $map_data);
  fclose($fp_a);

  unset($_SESSION['region_country_check']);
}

  /**
 * Create json file.
 */
public function agenda_rec_country_latest_file($rec_data) {
  $path = drupal_realpath('public://');
  $destination = $path."/agenda_dashboard/rec";
  if (!file_exists($destination)) {
    mkdir($destination, 777, TRUE);
  }

  $map_data = $rec_data;
  $fp_a     = fopen($path . '/agenda_dashboard/rec/rec_countries_en.json', 'w');
  $map_data = json_encode($map_data, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);
  $map_data = str_replace('\\', '', $map_data);
  $map_data = trim($map_data, '"');
  fwrite($fp_a, $map_data);
  fclose($fp_a);

  unset($_SESSION['rec_country_check']);
}



  /**
   * Hook_submitForm.
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {

  }


  /**
   * ValidateForm.
   */
  public function validateForm(array &$form, FormStateInterface $form_state) {

   }
   
}


